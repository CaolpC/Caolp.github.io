<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot 启动原理</title>
      <link href="posts/79b75253/"/>
      <url>posts/79b75253/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/202002031315.jpg" alt="202002031315" /></p><h3 id="spring-boot-启动流程"><a class="markdownIt-Anchor" href="#spring-boot-启动流程"></a> Spring Boot 启动流程</h3><p><code>Spring Boot</code> 启动分为两个步骤，首先创建 <code>SpringBootApplication</code>，并且进行初始化操作，然后执行 <code>run</code> 方法，启动 <code>SpringBootApplication</code> 应用</p><h4 id="创建-springbootapplication"><a class="markdownIt-Anchor" href="#创建-springbootapplication"></a> 创建 SpringBootApplication</h4><ol><li>将 <code>xxxApplication.class</code> 作为参数 <code>primarySources</code> 传入</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 SpringApplication 的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>调用构造方法，创建一个新的 <code>SpringApplication</code> 实例， 该应用将从指定 <code>primarySources</code> 中加载 <code>beans</code>, 该应用在调用之前被定制化处理</p><ul><li>加载 <code>resourceLoader</code>， 初始化时，<code>resourceLoader</code> 为空</li><li>将参数放在一个 <code>LinkedHashSet</code> 中</li><li>判断 <code>webApplication</code> 类型是否为 <code>Web</code> 类型应用</li><li>设置初始化器 <code>initializers</code>，通过 <code>getSpringFactoriesInstances()</code> 方法从 <code>META-INF/spring.factories</code> 路径下获取所有 <code>ApplicationContextInitializer.class</code> 类型的类全类名</li><li>设置监听器 <code>listeners</code>， 通过 <code>getSpringFactoriesInstances()</code> 方法从 <code>META-INF/spring.factories</code> 路径下获取所有<code>ApplicationListener.class</code> 类型的类的全类名</li><li>创建 <code>main</code> 方法 <code>mainApplicationClass</code> 对象；创建一个运行时异常，然后获得堆栈数组，遍历堆栈数组，然后判断是否为 <code>main</code> 方法，如果是，则通过 <code>Class.forName()</code> 方法创建 <code>Class</code> 对象</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化时，resourceLoader 为空</span></span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/20210203160920.png" alt="Initializers 和 Listners 的位置" /><br />这幅图展示的只有 spring boot 包下的所有 Initializers 和 Listners，但是在 SpringApplication 启动时会扫描所有导入包类路径下的 spring.factories 文件中是否有 Initializers 和 Listners，如下图所示<br /><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/20210203161525.png" alt="所有的Initializers 和 listners 的位置" /></p><h3 id="运行-springbootapplication"><a class="markdownIt-Anchor" href="#运行-springbootapplication"></a> 运行 SpringBootApplication</h3><h4 id="前置准备工作"><a class="markdownIt-Anchor" href="#前置准备工作"></a> 前置准备工作</h4><ol><li><code>StopWatch</code> 用来对服务启动进行时间监控 <code>stopWatch.start()</code></li><li>创建一个可配置的 <code>ConfigurableApplicationContext</code></li><li>创建 <code>SpringBootExceptionReporter</code> 用来搜集启动失败异常信心并向用户报告</li><li>设置程序为自力更生模式 <code>configureHeadlessProperty()</code>; 需要程序运行在 Headless 模式下</li><li>获取 <code>SpringApplicationRunListeners</code>，新建一个 <code>SpringApplicationRunListeners(listners)</code> 用来存放从 <code><font color =  red>spring.factories</font></code>中所有 <code>SpringApplicationRunListener</code> 类型的类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">            getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</span><br><span class="line">&#125;</span><br><span class="line"># Run Listeners, 找到的 RunListeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure><ol start="6"><li>遍历所有的 <code>listners</code> 并调用 <code>starting()</code> 方法启动，构造 <code>ApplicationStartingEvent</code> 事件，<code>source</code> 为 <code>application</code> 并广播事件，通知各个监听器</li><li>对传入的参数 <code>args</code> 包装成 <code>ApplicationArguments</code></li></ol><h4 id="enviroment-环境准备"><a class="markdownIt-Anchor" href="#enviroment-环境准备"></a> Enviroment 环境准备</h4><p>接上文</p><ol><li>环境准备 <code>prepareEnvironment()</code>, 获得或者创建 <code>environment</code>, 并且对参数 <code>applicationArguments</code> 进行处理</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">        ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create and configure the environment</span></span><br><span class="line">    <span class="comment">// 如果原本存在 environment，那么使用原来的即可，如果不存在</span></span><br><span class="line">    <span class="comment">// 那么根据类型创建，由于环境是 SERVLET， 所以创建一个 StandardServletEnvironment()</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 对 environment 进行配置，</span></span><br><span class="line">    <span class="comment">// 1. 为 enviroment 添加一些转换起服务</span></span><br><span class="line">    <span class="comment">// 2. enviroment 配置</span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">//  environment 中 PropertySource 处理</span></span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="comment">// 遍历所有的监听器，执行 environmentPrepared() 方法</span></span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">// 将 environment 绑定到 spring.main 方法上</span></span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="comment">// 后置处理</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">                deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* environment 配置      - 为 environment 设置一些转换器服务 addConversionService(), 主要是一些不同类型值的转换   - 为 environment 配置一些 PropertySource, 用来存放从命令行中拿到的参数数据，也将其放入到 environment 中   - 为 environment 配置一些 Profiles, 用来存在一些激活的配置文件，并将其放入到 enviroment 中, 至此环境配置完成* environment 中 PropertySource 处理  - 将 PropertySource 封装成 ConfigurationPropertySource, 方便 environment 管理, 并且允许 PropertySourcesPropertyResolver 通过 ConfigurationPropertyName 进行解析* 遍历所有的监听器，执行 environmentPrepared() 方法, 构造 ApplicationEnvironmentPreparedEvent 事件， source 为 application 并广播事件，通知各个监听器* 将 environment 绑定到 spring.main 方法上， 先对 spring.main 方法进行实例化，然后调用 bind() 方法进行绑定* 一些后置处理，对自定义环境进行处理</code></pre><ol start="2"><li>配置需要忽略的 <code>Bean</code> 信息</li><li>打印 <code>Banner</code> 信息</li></ol><h4 id="ioc-容器工作流程"><a class="markdownIt-Anchor" href="#ioc-容器工作流程"></a> IOC 容器工作流程</h4><p>接上文</p><ol><li>首先创建一个 <code>IOC</code> 容器(<code>ApplicationContext</code>)<ul><li>判断类型，根据类型对类进行实例化操作并返回。如果是 <code>SERVLET</code> 类型，那么创建的类型为 <code>AnnotationConfigServletWebServerApplicationContext</code></li><li>将 <code>IOC</code> 容器实例化为 <code>ConfigurableApplicationContext</code> 类型的容器</li></ul></li><li>对环境准备中创建的 <code>Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters</code> 进行填充，对 <code>SpringApplication</code> 启动时产生的错误进行处理<ul><li>从所有的 <code>spring.factories</code> 文件中获取所有的<code>SpringBootExceptionReporter.class</code> 全类名并将其放入到 <code>LinkedHashSet&lt;&gt; names</code> 中</li><li>创建 <code>Spring</code> 工厂实例，并且循环对 <code>names</code> 中的类进行实例化获得 <code>List&lt;T&gt; instances</code></li><li>对 <code>instances</code> 进行排序</li></ul></li><li>准备 <code>IOC</code> 容器<ul><li>设置环境 <code>environment</code></li><li>设置 <code>beanNameGenerator</code>、<code>resourceLoader</code> 和 <code>addConversionService</code></li><li>将 <code>ApplicationContextInitializer</code> 放入到 <code>IOC</code> 容器中，每个 <code>initializer</code> 执行初始化方法 <code>initialize()</code></li><li><code>SpringApplicationRunListeners listeners</code> 遍历循环每一个 <code>listener</code> 执行 <code>contextPrepared()</code> 方法，构造 <code>IOC</code> 容器初始化广播事件 <code>ApplicationContextInitializedEvent()</code>， 通知各个监听器</li><li>日志相关处理</li><li>获取 <code>IOC</code> 容器 <code>bean</code> 工厂 <code>beanFactory</code>，单实例方式注册 <code>applicationArgument和printedBanner</code>，设置同名 <code>Bean</code> 是否可注册为不同的定义</li><li>?? lazyInitialization</li><li>获取所有的资源 <code>Sources</code> 包括 <code>primarySources``、sources</code></li><li><code>IOC</code> 容器加载资源、环境等内容<ul><li><code>BeanDefinitionLoader loader</code> 获取 <code>BeanDefinitionRegistry</code> 然后创建 <code>BeanDefinitionLoader</code> 获得 <code>BeanDefinitionLoader loader</code></li><li><code>loader</code> 设置 <code>setBeanNameGenerator</code>、<code>setResourceLoader</code> 和 <code>setEnvironment</code></li></ul></li><li><code>SpringApplicationRunListeners listeners</code> 遍历循环每一个 <code>listener</code> 执行 <code>contextLoaded()</code> 方法，为每一个 <code>listener</code> 添加 <code>IOC</code> 容器，并且 <code>IOC</code> 容器将这些监听器添加进去，最后创建 <code>ApplicationPreparedEvent</code> 事件并进行广播</li></ul> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">context.setEnvironment(environment);</span><br><span class="line">postProcessApplicationContext(context);</span><br><span class="line">applyInitializers(context);</span><br><span class="line">listeners.contextPrepared(context);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">logStartupProfileInfo(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line"><span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Load the sources</span></span><br><span class="line">Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>刷新 <code>IOC</code> 容器<ul><li>准备对 <code>IOC</code> 容器进行刷新，设置启动时间、激活标志、属性配置源的任何信息<ul><li>在 <code>IOC</code> 容器中初始化任何占位符属性源。实际没有任何操作</li><li>确认所有的被标记 <code>required</code> 的属性都是可解析的</li><li>存储预刷新 <code>pre-refresh</code> 的 <code>ApplicationListeners</code></li><li>通知子类刷新内部 <code>bean</code> 工厂</li><li>为 <code>IOC</code> 容器准备 <code>bean</code> 工厂</li><li>允许在 <code>IOC</code> 容器中子类对 <code>bean</code> 工厂进行后处理。</li></ul></li></ul> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line"><span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap 与 LinkedHashMap</title>
      <link href="posts/ce0196ed/"/>
      <url>posts/ce0196ed/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18069.jpg" alt="18069" /></p><h3 id="hashmap"><a class="markdownIt-Anchor" href="#hashmap"></a> HashMap</h3><h4 id="hashmap-构造方法"><a class="markdownIt-Anchor" href="#hashmap-构造方法"></a> HashMap 构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*构造方法1*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*构造方法2*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*构造方法3*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*构造方法4*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>HashMap</code> 构造方法共有四个，第一个构造方法是最常用的，无参构造器，初始化负载因子 <code>loadFactor</code> 为 0.75， 负载因子主要用来决定 HashMap 中<strong>键值对数量</strong>和<strong>Hash表容量</strong>之间的比例，如果负载因子太大，那么 <code>HashMap</code> 中的键值对越多，但是查找耗费时间会变长，<code>HashMap</code> 扩容可能性降低，反之 <code>HashMap</code> 占用的空间会变大，扩容可能性增大</li><li>构造方法2，容量(initialCapacity)和负载因子(loadFactor)被初始化，initialCapacity 默认值16，最大值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>，指定合适的初始化容量非常重要，避免一些不必要的扩容操作，导致效率降低</li><li><code>threshold</code> 用来限制 <code>HashMap</code> 中能存放键值对的数量，当数量超过 <code>threshold</code> 时，需要进行扩容操作，<code>threshold = initialCapacity * loadFactor</code>, 构造方法2中通过 <code>tableSizeFor()</code> 方法对 <code>threshold</code> 进行赋值，因为此时 <code>table</code> 还没有进行初始化，当进行 <code>put</code> 操作时，<code>table</code> 才会被构建，同时 <code>threshold</code> 会在 <code>resize()</code> 方法中被重新赋值</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是对 <code>tableSizeFor</code> 函数的分析, 分为两种不同的情况</p><ol><li><p>假设 <code>cap</code> 的值正好为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>, 假设其值为 8, 那么;</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/tableForSize1.png" alt="tableForSize1" /></p></li><li><p>假设 <code>cap</code> 的值不是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>, 假设其值为 13, 那么;</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/tableForSize2.png" alt="tableForSize2" /></p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个方法用来返回参数二进制的前导零的个数</span></span><br><span class="line"><span class="comment">    * 参数在计算机中使用补码的方式保存</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> i 参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 前导零的个数</span></span><br><span class="line"><span class="comment">    * 例: 参数 i = 0</span></span><br><span class="line"><span class="comment">    *    原码 0000 0000 0000 0000 0000 0000 0000 0000</span></span><br><span class="line"><span class="comment">    *    反码 1111 1111 1111 1111 1111 1111 1111 1111</span></span><br><span class="line"><span class="comment">    *    补码 0000 0000 0000 0000 0000 0000 0000 0000</span></span><br><span class="line"><span class="comment">    *    前导0个数: 32 个</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *    参数 i= -1</span></span><br><span class="line"><span class="comment">    *    原码 1000 0000 0000 0000 0000 0000 0000 0001</span></span><br><span class="line"><span class="comment">    *    反码 1111 1111 1111 1111 1111 1111 1111 1110</span></span><br><span class="line"><span class="comment">    *    补码 1111 1111 1111 1111 1111 1111 1111 1111</span></span><br><span class="line"><span class="comment">    *    前导0个数: 0个</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *    参数 i= 6</span></span><br><span class="line"><span class="comment">    *    原码 0000 0000 0000 0000 0000 0000 0000 0110</span></span><br><span class="line"><span class="comment">    *    反码 0000 0000 0000 0000 0000 0000 0000 0110</span></span><br><span class="line"><span class="comment">    *    补码 0000 0000 0000 0000 0000 0000 0000 0110</span></span><br><span class="line"><span class="comment">    *    前导0个数: 29</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *    numberOfLeadingZeros方法</span></span><br><span class="line"><span class="comment">    *    1.采用轮询的方式，判断每一位</span></span><br><span class="line"><span class="comment">    *    2. 采用二分法进行计算</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这种方法是通过轮询的方式，从最高位开始依次遍历，当 i 某一位存在 1</span></span><br><span class="line"><span class="comment">    * 那么就停止循环，将前导0的个数输出</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> i 参数i</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 参数 i 的前导0的个数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZerosByLoop</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;=<span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">32</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">31</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i &amp; (<span class="number">1</span> &lt;&lt; k) ) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HD, Count leading 0&#x27;s</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">32</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">31</span>;</span><br><span class="line">    <span class="comment">// |________|________|________|________|</span></span><br><span class="line">    <span class="comment">// i &gt;= 2^16, 那么 n= 31-16 = 15, i 无符号右移 16 位</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt; <span class="number">16</span>) &#123; n -= <span class="number">16</span>; i &gt;&gt;&gt;= <span class="number">16</span>; &#125; <span class="comment">// 高 16 位, |________|________|</span></span><br><span class="line">    <span class="comment">// 剩余的 i &gt;= 2^8, 那么 n = 15-8 = 7, i 无符号右移 8 位</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">8</span>) &#123; n -=  <span class="number">8</span>; i &gt;&gt;&gt;=  <span class="number">8</span>; &#125; <span class="comment">// 高 8 位   |________|</span></span><br><span class="line">    <span class="comment">// 剩余的 i &gt;= 2^4, 那么 n = 7-4 = 3, i 无符号右移 4 位</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">4</span>) &#123; n -=  <span class="number">4</span>; i &gt;&gt;&gt;=  <span class="number">4</span>; &#125; <span class="comment">// 高四位    |____|</span></span><br><span class="line">    <span class="comment">// 剩余的 i &gt;= 2^2, 那么 n = 3-2 = 1, i 无符号右移 2 位</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">2</span>) &#123; n -=  <span class="number">2</span>; i &gt;&gt;&gt;=  <span class="number">2</span>; &#125; <span class="comment">// 高两位    |__|</span></span><br><span class="line">    <span class="comment">// 判断最后的 i = 1 或者 &gt; 1, 如果 i &gt; 1, i &gt;&gt;&gt; 1 = 1, 否则 i = 0</span></span><br><span class="line">    <span class="keyword">return</span> n - (i &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * i = 2^17</span></span><br><span class="line"><span class="comment">    * 0000 0000 0000 0010 0000 0000 0000 0000</span></span><br><span class="line"><span class="comment">    * 1 &lt;&lt; 16</span></span><br><span class="line"><span class="comment">    * 0000 0000 0000 0001 0000 0000 0000 0000</span></span><br><span class="line"><span class="comment">    * i &gt; 1 &lt;&lt; 16</span></span><br><span class="line"><span class="comment">    * n = 31 -16 = 15</span></span><br><span class="line"><span class="comment">    * i &gt;&gt;&gt; 16</span></span><br><span class="line"><span class="comment">    * 0000 0000 0000 0000 0000 0000 0000 0010</span></span><br><span class="line"><span class="comment">    * i = 2</span></span><br><span class="line"><span class="comment">    * i &gt;&gt;&gt; 1 = 1</span></span><br><span class="line"><span class="comment">    * n = 15 - 1 = 14</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><h4 id="hashnode"><a class="markdownIt-Anchor" href="#hashnode"></a> HashNode</h4><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/20210121225137.png" alt="HashNode" /></p><p>HashMap 中的 Node 静态类实现了 Map.Entry&lt;K,V&gt;</p><h4 id="hashmap-get-方法"><a class="markdownIt-Anchor" href="#hashmap-get-方法"></a> HashMap get 方法</h4><p>HashMap 的 get 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hashmap-put-方法"><a class="markdownIt-Anchor" href="#hashmap-put-方法"></a> HashMap put 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过下标存放或者取值</span></span><br><span class="line">(n - <span class="number">1</span>) &amp; hash</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 hash 值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 hashCode 值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为什么使用 <code>h = key.hashCode() ^ (h &gt;&gt;&gt; 16)</code>, 而不是直接使用 <code>hashCode</code>?<br />当从桶数组中进行取值时，需要通过 <code>(n-1)&amp;hash</code> 去定位元素/节点的位置, 而 <code>n</code> 的值一般都小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>, <code>n</code> 为表长度, 直接采用 <code>(n-1)</code> 与 <code>hashCode</code> 进行操作时, <code>hashCode</code> 仅末尾<strong>16</strong>位数字参与运算, 如果 <code>hashCode</code> 同样参与运算, 那么最终结果将更加散列, Hash 表的冲突也就会越小</li><li>问题1中为什么使用 ^ 符号?<br />因为 &amp; 和 | 操作更加偏向于 0 和 1, 导致分布不均匀</li><li>为什么使用 <code>(n-1) &amp; hash</code>, 而不使用 <code>hash % n</code>?<br />二者计算结果相同, 但 &amp; 效率高于 %</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 运行时赋值, table -&gt; tab; table.length -&gt; 0, tab 为空或者长度为0, table 未进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// tab[i = (n - 1) &amp; hash] ? 如何判断这个桶中 通过节点 hash 定位节点所在的桶位置，并检测桶中是否包含节点引用</span></span><br><span class="line">    <span class="comment">// table 已经初始化, 且通过 hash 算法找到下标所在的位置数据为空,直接将数据存放到指定位置</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// table 已经初始化, 且通过hash算法找到下标所在的位置数据不为空，发生hash冲突（碰撞）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 判断插入的 key 如果等于当前位置的 key 的话，将 e 指向该键值对</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果桶中的数据类型为 TreeNode, 使用红黑树插入</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 如果是链表，则进行循环判断</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 链表中不包含插入节点, 将该节点插入到链表末尾</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表的长度大于阈值, </span></span><br><span class="line">                        <span class="comment">// table 容量超过最小树化容量, 将链表进行树化</span></span><br><span class="line">                        <span class="comment">// 否则进行扩容处理（优先进行扩容处理）</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 链表中包含插入节点, 则跳出循环</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 链表循环指针移动</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  //经过上面的循环后，如果e不为空，则说明上面插入的值已经存在于当前的hashMap中，那么更新指定位置的键值对</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 回调处理, 对于 LinkedHashMap 来说, 用来处理指针链接</span></span><br><span class="line">            afterNodeAccess(e); </span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 回调处理</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">* accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">* Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">* elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">* with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// table 已经进行初始化, 并且容量 &gt; 0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 table 的容量已经达到最大容量 MAXIMUM_CAPACITY = 1 &lt;&lt; 30, 则不进行扩容, 直接将阈值设置为最大值 Integer.MAX_VALUE</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 table 容量大于等于默认的初始化容量, 而且扩容两倍之后的容量小于最大容量, 那么将容量调整为原来的两倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阈值 threshold 大于 0, 使用 threshold 变量暂时保存 initialCapacity 参数的值, 这种情况出现于 new HashMap(2, 0.75) / new HashMap(2)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 如果阈值和容量都没有进行过初始化, 初始化 HashMap 的时候</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 使用默认值分别初始化容量 16 和阈值 12</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 newThr 为 0, 重新计算, new HashMap(2, 0.75) / new HashMap(2) 情况下该分支启用</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                    (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新阈值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">// 更新数组桶</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 如果原来的桶中存在数据, 由于 table 容量发生变化，hash 值也会发生变化，需要重新计算下标</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 指定下标中存在数据</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 指定下标只有一个节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 重新计算 hash 值并放入到新的下标中</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果节点是 TreeNode</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 使用 split 方法进行拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 如果为链表, 通过 hash 计算新的下标，然后重新分组进行放置</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 计算 e.hash &amp; oldCap, 与 0 进行对比然后判断是否对链表进行拆分, 使得键值对分布更加均匀，一半放在低位，一半放在高位</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//  将分组后的链表映射到新桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h3><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/red_black_tree.jpg" alt="red_black_tree" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 增删改查</title>
      <link href="posts/4ebc1d4b/"/>
      <url>posts/4ebc1d4b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18078.jpg" alt="Mybatis 增删改查" /></p><h3 id="mybatis-增删改查"><a class="markdownIt-Anchor" href="#mybatis-增删改查"></a> Mybatis 增删改查</h3><h4 id="xml-书写"><a class="markdownIt-Anchor" href="#xml-书写"></a> Xml 书写</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.EmployeeMapper03&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.EMPLOYEE e where e.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- parameterType：参数类型，可以省略，</span></span><br><span class="line"><span class="comment">    获取自增主键的值：</span></span><br><span class="line"><span class="comment">    mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()；</span></span><br><span class="line"><span class="comment">    useGeneratedKeys=&quot;true&quot;；使用自增主键获取主键值策略</span></span><br><span class="line"><span class="comment">    keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.EMPLOYEE (id, last_name, gender) VALUES (null, #&#123;lastName&#125;, #&#123;gender&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    获取非自增主键的值：</span></span><br><span class="line"><span class="comment">    Oracle不支持自增；Oracle使用序列来模拟自增；zx</span></span><br><span class="line"><span class="comment">    每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        keyProperty: 查出的主键值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">        order=&quot;BEFORE&quot;: 当前sql在插入sql之前运行</span></span><br><span class="line"><span class="comment">               AFTER: 当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">        resultType: 查出的数据的返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        BEFORE运行顺序：</span></span><br><span class="line"><span class="comment">            先运行selectKey查询id的sql: 查出id值封装给javaBean的id属性</span></span><br><span class="line"><span class="comment">            在运行插入的sql: 就可以取出id属性对应的值</span></span><br><span class="line"><span class="comment">        AFTER运行顺序：</span></span><br><span class="line"><span class="comment">            先运行插入的sql（从序列中取出新值作为id）；</span></span><br><span class="line"><span class="comment">            再运行selectKey查询id的sql；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- BEFORE--&gt;</span></span><br><span class="line">            select EMPLOYEES_SEQ.nextval from dual</span><br><span class="line">            <span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">             select EMPLOYEES_SEQ.currval from dual --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- BEFORE:--&gt;</span></span><br><span class="line">        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)</span><br><span class="line">        values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;)</span><br><span class="line">        <span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)</span></span><br><span class="line"><span class="comment">        values(employees_seq.nextval,#&#123;lastName&#125;,#&#123;email&#125;) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.EMPLOYEE set last_name = #&#123;lastName&#125;, gender = #&#123;gender&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.EMPLOYEE where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类书写"><a class="markdownIt-Anchor" href="#测试类书写"></a> 测试类书写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            EmployeeMapper03 mapper = sqlSession.getMapper(EmployeeMapper03.class);</span><br><span class="line">            Employee employee = mapper.getEmployee(<span class="number">1</span>);</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试增删改</span></span><br><span class="line"><span class="comment">     * 1、mybatis允许增删改直接定义以下类型返回值</span></span><br><span class="line"><span class="comment">     * Integer、Long、Boolean、void</span></span><br><span class="line"><span class="comment">     * 2、我们需要手动提交数据</span></span><br><span class="line"><span class="comment">     * sqlSessionFactory.openSession();===》手动提交</span></span><br><span class="line"><span class="comment">     * sqlSessionFactory.openSession(true);===》自动提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            EmployeeMapper03 mapper = sqlSession.getMapper(EmployeeMapper03.class);</span><br><span class="line">            Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">&quot;NiNa&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            mapper.insertEmployee(employee);</span><br><span class="line">            System.out.println(employee.getId());</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            EmployeeMapper03 mapper = sqlSession.getMapper(EmployeeMapper03.class);</span><br><span class="line">            Employee employee = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">boolean</span> success = mapper.updateEmployee(employee);</span><br><span class="line">            System.out.println(success);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            EmployeeMapper03 mapper = sqlSession.getMapper(EmployeeMapper03.class);</span><br><span class="line">            mapper.deleteEmployee(<span class="number">3</span>);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ol><li><code>sqlSession</code> 默认不是自动提交的, 可以采用两种方式解决</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 手动进行提交</span></span><br><span class="line">sqlSession.commit()</span><br><span class="line"><span class="comment">//2. true 标识自动提交 </span></span><br><span class="line">sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ID</code> 自增策略<br /><code>Mysql</code> 支持 ID 自增,</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot;: 使用自增主键获取主键值策略 </span></span><br><span class="line"><span class="comment">keyProperty: 指定对应的主键属性，即 &lt;code&gt;mybatis&lt;/code&gt; </span></span><br><span class="line"><span class="comment">获取到主键值以后, 将这个值封装给 &lt;code&gt;javaBean&lt;/code&gt; 的哪个属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Oracle</code> 使用序列来模拟自增，每次插入的数据的主键是从序列中拿到的值，可以采用两种不同的策略进行取值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- BEFORE--&gt;</span></span><br><span class="line">    select EMPLOYEES_SEQ.nextval from dual</span><br><span class="line">    <span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">        select EMPLOYEES_SEQ.currval from dual --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AFTER--&gt;</span></span><br><span class="line">    select EMPLOYEES_SEQ.currval from dual </span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>BEFORE 运行顺序：    先运行selectKey查询id的sql: 查出id值封装给javaBean的id属性    在运行插入的sql: 就可以取出id属性对应的值    使用nextvalAFTER 运行顺序：    先运行插入的sql（从序列中取出新值作为id）    再运行selectKey查询id的sql    使用currval</code></pre><h3 id="mybatis-参数处理"><a class="markdownIt-Anchor" href="#mybatis-参数处理"></a> Mybatis 参数处理</h3><p><code>Mybatis</code> 参数处理</p><ol><li>单个参数, Mybatis 不会进行特殊处理, 直接使用 #{参数名/任意名}, 取出参数进行处理</li><li>多个参数, Mybatis 进行特殊处理, 多个参数会被封装成一个 map<br />a. key: param1…paramN/arg0…argN; 或者使用参数的索引<br />b. value: 传入的参数值<br />c. #{} map 中获取指定 key 的值</li><li>多个参数的命名参数<br />a. 明确指定封装参数时 map 的 key 值; @Param(“id”)<br />b. key: 使用@Param注解指定的值<br />c. value: 参数值<br />d. #{指定的key}取出对应的参数值</li><li>使用 POJO 传入参数, 当多个参数正好是业务逻辑的数据模型<br />a. #{属性名称}: 取出传入的 POJO 属性值</li><li>使用 Map 传入参数, 当没有对应的 POJO 时<br />a. #{key} 取出 map 中 key 对应的值</li><li>使用 TO 传入参数(Transfer Object), 添加一些分页信息</li></ol><p>如果多个参数直接传入 Mapper 然后交给 Mapper.xml 处理会抛出异常:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Employee <span class="title">getEmployeeByIdAndName</span><span class="params">(Integer id, String lastName)</span></span>;</span><br></pre></td></tr></table></figure><p>对应的 xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeByIdAndName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.EMPLOYEE e where e.id = #&#123;id&#125; and e.last_name = #&#123;lastName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会抛出异常, 异常中表明 xml 识别的参数名称为 [arg1, arg0, param1, param2]</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [arg1, arg0, param1, param2]</span><br><span class="line">### Cause: org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [arg1, arg0, param1, param2]</span><br></pre></td></tr></table></figure><p>所以可以将 xml 中的方法修改为</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeByIdAndName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.EMPLOYEE e where e.id = #&#123;param1/arg0&#125; and e.last_name = #&#123;param2/arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在 Mapper 接口中添加 @Param() 注解, 用来标识参数的名称, 明确指定封装参数时 map 的 key 值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 方法<span class="number">3</span></span><br><span class="line"><span class="function">Employee <span class="title">getEmployeeByIdAndName</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;lastName&quot;)</span> String lastName)</span></span>;</span><br><span class="line"><span class="number">2.</span> 方法<span class="number">4</span></span><br><span class="line"><span class="function">Employee <span class="title">getEmployeeByIdAndName</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"><span class="number">5.</span> 方法<span class="number">5</span></span><br><span class="line"><span class="function">Employee <span class="title">getEmployeeByIdAndName</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2"></a> 注意事项</h4><ol><li>以下两种方式也可以取出参数值</li></ol><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function">Employee <span class="title">getEmp</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>Integer id, String lastName)</span></span>;</span><br><span class="line">xml 取值：id==&gt;#&#123;id/param1&#125;   lastName==&gt;#&#123;param2&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Employee <span class="title">getEmp</span><span class="params">(Integer id, <span class="meta">@Param(&quot;e&quot;)</span>Employee emp)</span></span>;</span><br><span class="line">xml 取值：id==&gt;#&#123;param1&#125;    lastName===&gt;#&#123;param2.lastName/e.lastName&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是Collection（List、Set）类型或者是数组, 也是把传入的list或者数组封装在map中<br />key：Collection（collection）,如果是List还可以使用这个key(list), 数组(array)</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">取值：取出第一个id的值：   #&#123;list[0]&#125;</span><br><span class="line"><span class="comment">// xml:</span></span><br><span class="line"><span class="comment">//select * from mybatis.EMPLOYEE e where e.id = #&#123;list[0]&#125;</span></span><br><span class="line"><span class="comment">// 不能使用 param1 或者 arg0</span></span><br></pre></td></tr></table></figure><ol start="3"><li>推荐使用 Map/TO 进行参数传递</li></ol><h4 id="参数解析"><a class="markdownIt-Anchor" href="#参数解析"></a> 参数解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">convertArgsToSqlCommandParam</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paramNameResolver.getNamedParams(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; names;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getNamedParams</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> paramCount = names.size();</span><br><span class="line">    <span class="comment">//3. 如果参数个数为0, 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2. 如果参数有 @Param 注解, 并且参数个数为1, 直接返回 arg[0]</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> args[names.firstKey()];</span><br><span class="line">    <span class="comment">//3、多个元素或者有Param标注</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> ParamMap&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4. 遍历 names 集合, &#123;0=id, 1=lastName,2=2&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//names 集合的 valu 作为 key;  names 集合的 key 又作为取值的参考args[0]:args[1，&quot;Tom&quot;]:</span></span><br><span class="line">            <span class="comment">//eg:&#123;id=args[0]:1, lastName=args[1]:Tom, 2=args[2]&#125;</span></span><br><span class="line">            param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">            <span class="comment">// add generic param names (param1, param2, ...)</span></span><br><span class="line">            <span class="comment">//额外的将每一个参数也保存到 map 中，使用新的 key：param1...paramN</span></span><br><span class="line">            <span class="comment">//效果：有 Param 注解可以#&#123;指定的key&#125;，或者#&#123;param1&#125;</span></span><br><span class="line">            <span class="keyword">final</span> String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line">        <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">            param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数值的获取"><a class="markdownIt-Anchor" href="#参数值的获取"></a> 参数值的获取</h4><ol><li>#{}：可以获取map中的值或者pojo对象属性的值</li><li>${}：可以获取map中的值或者pojo对象属性的值</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> <span class="keyword">id</span>=$&#123;<span class="keyword">id</span>&#125; <span class="keyword">and</span> last_name=<span class="comment">#&#123;lastName&#125;</span></span><br><span class="line">Preparing: <span class="keyword">select</span> * <span class="keyword">from</span> tbl_employee <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span> <span class="keyword">and</span> last_name=?</span><br></pre></td></tr></table></figure><pre><code>区别：    #&#123;&#125;:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入    $&#123;&#125;:取出的值直接拼装在sql语句中；会有安全问题；    大多情况下，我们去参数的值都应该去使用#&#123;&#125;；        原生jdbc不支持占位符的地方我们就可以使用$&#123;&#125;进行取值    比如分表、排序...、按照年份分表拆分        select * from $&#123;year&#125;_salary where xxx;        select * from tbl_employee order by $&#123;f_name&#125; $&#123;order&#125;</code></pre><ol start="3"><li><p>#{}:更丰富的用法：<br />规定参数的一些规则：<br />javaType、 jdbcType、 mode（存储过程）、 numericScale、<br />resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；</p><p>jdbcType通常需要在某种特定的条件下被设置：<br />在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；</p><pre><code> JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;  由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法 1、#&#123;email,jdbcType=OTHER&#125;; 2、jdbcTypeForNull=NULL &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 初识与配置</title>
      <link href="posts/15832afd/"/>
      <url>posts/15832afd/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18128.jpg" alt="Mybatis 初识与配置" /></p><h3 id="mybatis"><a class="markdownIt-Anchor" href="#mybatis"></a> Mybatis</h3><h4 id="书写步骤"><a class="markdownIt-Anchor" href="#书写步骤"></a> 书写步骤</h4><ol><li>根据全局配置文件 <strong>mybatis-config.xml</strong> 创建一个 <code>SqlSessionFactory</code> 对象, 配置文件中包含一些运行环境<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// mybatis-config.xml 是 mybatis 全局配置文件，可以放在 resources 目录下</span></span><br><span class="line">    String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用完之后将其关闭</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession()</span><br><span class="line">sqlSession.close()</span><br></pre></td></tr></table></figure></li><li><code>sql</code> 映射文件, 配置了每一个 <code>sql</code> 映射文件, 以及每一个 <code>sql</code> 的封装规则</li><li>将 <code>SqlSessionFactory</code> 映射文件注册在全局配置文件之中</li><li>进行增删改查操作<ul><li>根据全局配置文件得到 <code>SqlSessionFactory</code></li><li>获取 <code>sqlSession</code> 对象来执行增删改查, 一个 <code>sqlSession</code> 代表和数据库的一次会话，用完关闭</li><li>使用 <code>sql</code> 的唯一标志来告诉 <code>MyBatis</code> 执行哪个 <code>sql</code>, <code>sql</code> 都保存在 <code>sql</code> 映射文件中</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">        EmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        Employee employee = mapper.getEmployee(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ol><li>接口式编程<ul><li>原生: Dao-&gt;DaoImpl , 一个接口方法对应一个实现方法</li><li>Mybatis: Dao-&gt;<strong>xxxxMapperXml</strong>, 一个接口对应一个 <code>xml</code> 文件, 通过名称空间 <code>namespace</code> 进行匹配, 接口中的方法对应 <code>xml</code> 中的一个 <code>id</code> 方法。</li></ul></li><li><code>SqlSession</code> 代表和数据库的一次会话, 通过 <code>SqlSessionFactory</code> 获取, 每次用完之后必须关掉</li><li><code>SqlSession</code> 和 <code>connection</code> 都是非线程安全的， 不能使用 <code>private Sqlsession sqlsession</code> 获取, 每次都应该取获取新的对象</li><li><code>mapper</code> 接口没有实现类，但是 <code>mybatis</code> 会为这个接口生成一个代理对象(将接口与xml进行绑定),<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class);</span><br></pre></td></tr></table></figure></li><li>两个重要的配置文件<ul><li><code>mybatis</code> 全局配置文件 <strong>mybatis-config.xml</strong>, 包含数据库连接池信息，事务管理器信息以及系统运行环境信息</li><li><code>sql</code> 映射文件，保存了每一个 <code>sql</code> 语句的映射信息, 可以将 <code>sql</code> 抽取出来</li></ul></li></ol><h3 id="mybatis-配置"><a class="markdownIt-Anchor" href="#mybatis-配置"></a> Mybatis 配置</h3><h4 id="properties"><a class="markdownIt-Anchor" href="#properties"></a> properties</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1、mybatis可以使用 properties来引入外部 properties 配置文件的内容；</span></span><br><span class="line"><span class="comment">    resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">    url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info modern"><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><ol><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ol></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">为占位符指定一个默认值</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 启用默认值特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username:ut_user&#125;&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?:&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 修改默认值的分隔符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db:username?:ut_user&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="settings"><a class="markdownIt-Anchor" href="#settings"></a> settings</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    2、settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">        setting:用来设置每一个设置项</span></span><br><span class="line"><span class="comment">            name：设置项名</span></span><br><span class="line"><span class="comment">            value：设置项取值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="typealiases"><a class="markdownIt-Anchor" href="#typealiases"></a> typeAliases</h4><p>别名处理器：可以为我们的java类型起别名, 别名不区分大小写, 用在 <strong>xxxxMapper.xml</strong> 中的 <code>ResultType</code> 中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1、typeAlias:为某个java类型起别名</span></span><br><span class="line"><span class="comment">type:指定要起别名的类型全类名;默认别名就是类名小写；employee</span></span><br><span class="line"><span class="comment">alias:指定新的别名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;typeAlias type=&quot;com.mybatis.bean.Employee&quot; alias=&quot;emp&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2、package:为某个包下的所有类批量起别名 </span></span><br><span class="line"><span class="comment">name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名</span></span><br><span class="line"><span class="comment">       @Alias(&quot;emp&quot;)</span></span><br><span class="line"><span class="comment">       public class Employee &#123;</span></span><br><span class="line"><span class="comment">           ...</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="environments"><a class="markdownIt-Anchor" href="#environments"></a> environments</h4><p>用来配置 <code>Mybatis</code> 环境</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境目的。</span></span><br><span class="line"><span class="comment">        environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识</span></span><br><span class="line"><span class="comment">            transactionManager：事务管理器；</span></span><br><span class="line"><span class="comment">                type：事务管理器的类型; JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)</span></span><br><span class="line"><span class="comment">                    自定义事务管理器：实现 TransactionFactory 接口.type指定为全类名</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            dataSource：数据源;</span></span><br><span class="line"><span class="comment">                type:数据源类型; UNPOOLED(UnpooledDataSourceFactory)</span></span><br><span class="line"><span class="comment">                               | POOLED(PooledDataSourceFactory)</span></span><br><span class="line"><span class="comment">                               | JNDI(JndiDataSourceFactory)</span></span><br><span class="line"><span class="comment">                自定义数据源：实现 DataSourceFactory 接口, type是全类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev_mysql&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev_mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev_oracle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;orcl.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;orcl.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;orcl.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;orcl.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="databaseidprovider"><a class="markdownIt-Anchor" href="#databaseidprovider"></a> databaseIdProvider</h4><p><code>Mybatis</code> 用来支持多数据库厂商的, 可以在 <code>Configuration</code> 类中找到</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5、databaseIdProvider：支持多数据库厂商的；</span></span><br><span class="line"><span class="comment">        type=&quot;DB_VENDOR&quot;：VendorDatabaseIdProvider</span></span><br><span class="line"><span class="comment">        作用就是得到数据库厂商的标识(驱动 getDatabaseProductName())，mybatis 就能根据数据库厂商标识来执行不同的 sql;</span></span><br><span class="line"><span class="comment">        MySQ, Oracl, SQL Server, xxxx</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要在 <strong>xxxxMapper.xml</strong> 中指定数据库类型 <code>databaseId</code>, 和 <code>databaseIdProvider</code> 中的进行对应，第一个是默认值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mybatis.bean.Employee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">    select EMPLOYEE_ID id,LAST_NAMElastName,EMAIL email </span><br><span class="line">    from employees where EMPLOYEE_ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mappers"><a class="markdownIt-Anchor" href="#mappers"></a> mappers</h4><p>用来将写好的 <code>sql</code> 映射文件注册到全局配置中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        mapper:注册一个sql映射 </span></span><br><span class="line"><span class="comment">            注册配置文件</span></span><br><span class="line"><span class="comment">            resource：引用类路径下的sql映射文件</span></span><br><span class="line"><span class="comment">                mybatis/mapper/EmployeeMapper.xml</span></span><br><span class="line"><span class="comment">            url：引用网路路径或者磁盘路径下的sql映射文件</span></span><br><span class="line"><span class="comment">                file:///var/mappers/AuthorMapper.xml</span></span><br><span class="line"><span class="comment">            注册接口</span></span><br><span class="line"><span class="comment">            class：引用（注册）接口，</span></span><br><span class="line"><span class="comment">                1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</span></span><br><span class="line"><span class="comment">                2、没有sql映射文件，所有的sql都是利用注解写在接口上;</span></span><br><span class="line"><span class="comment">                推荐：</span></span><br><span class="line"><span class="comment">                    比较重要的，复杂的Dao接口我们来写sql映射文件</span></span><br><span class="line"><span class="comment">                    不重要，简单的Dao接口为了开发快速可以使用注解；</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper resource=&quot;mybatis/mapper/EmployeeMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper class=&quot;com.atguigu.mybatis.dao.EmployeeMapperAnnotation&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量注册： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mybatis.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行批量注册的时候, 要确保接口路径和 <strong>xxxxmapper.xml</strong> 路径保持一致，否则将无法拿到接口对应的 <code>xml</code> 文件, 放在相同路径下可以找到是因为 <code>java</code> 在编译的时候，会将同一个包名下的文件都放在一起, 目录结构如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/20210114114354.png" alt="目录结构" /></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 递归和行号</title>
      <link href="posts/2001e071/"/>
      <url>posts/2001e071/</url>
      
        <content type="html"><![CDATA[<h3 id="oracle-recursion"><a class="markdownIt-Anchor" href="#oracle-recursion"></a> Oracle Recursion</h3><h4 id="hierarchical-queries"><a class="markdownIt-Anchor" href="#hierarchical-queries"></a> Hierarchical Queries</h4><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/Hierarchical_Queries.png" alt="Hierarchical Queries" /></p><p>Hierarchical Queries</p><pre>[ <b>START WITH</b> condition ]<b>CONNECT BY</b> [ <b>NOCYCLE</b> ] condition</pre><p>其中 <code>START WITH</code> 用来标识遍历层级结构的 <code>root</code> 节点, <code>CONNECT BY</code> 用来指明层级结构中父节点和子节点之间的关系, 即标明两者之间的连接关系。</p><p><code>NOCYCLE</code> 和 <code>CONNECT_BY_ISCYCLE</code> 伪列一起使用来检查返回的数据是否存在循环，将存在循环的结果展示出来 <code>CONNECT_BY_ISCYCLE</code> 展示为1, 如果不使用 <code>NOCYCLE</code> 参数执行的话，当层级中存在循环关系的话，执行结果会报错。</p><p>在层级结构查询中, <code>condition</code> 中的条件表达式必须满足 <code>PRIOR</code> 操作, 同时支持多条件 <code>PRIOR</code>, 但 <code>condition</code> 中只需要一个 <code>PRIOR</code>, 如果是多条件的操作，那么只有一个 <code>PRIOR</code> 条件会生效。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">... PRIOR expr = expr</span><br><span class="line">or</span><br><span class="line">... expr = PRIOR expr</span><br><span class="line"></span><br><span class="line">CONNECT BY last_name != &#x27;King&#x27; AND PRIOR employee_id = manager_id ...</span><br><span class="line">CONNECT BY PRIOR employee_id = manager_id and </span><br><span class="line">           PRIOR account_mgr_id = customer_id ...</span><br></pre></td></tr></table></figure><p><code>PRIOR</code> 一元运算符, 优先级等同于 “+”、&quot;-&quot;, 用来计算层级查询中跟在其之后的运算表达式(当前节点的父节点)</p><p><code>CONNECT BY</code> 和 <PRIOR> 后边的查询都可以采用子查询的方式，但是不能使用序列, <code>CURRVAL</code> 和 <code>NEXTVAL</code> 是无效的 <code>PRIOR</code> 表达式</p><h4 id="hierarchical-queries-步骤"><a class="markdownIt-Anchor" href="#hierarchical-queries-步骤"></a> Hierarchical Queries 步骤</h4><ol><li><p>先执行 <code>JOIN</code> 操作, 无论 <code>JOIN</code> 在 <code>FROM</code> 中，还是在 <code>WHERE</code> 条件中</p></li><li><p><code>CONNECT BY</code> 执行</p></li><li><p>执行剩下的 <code>WHERE</code> 中的限制条件</p></li><li><p><code>Oracle</code> 选择一个根节点(行)<code>root</code>, 这个节点满足 <code>START WITH</code> 条件</p></li><li><p><code>Oracle</code> 选择每一个父节点(行)的孩子节点(行), 每一个孩子节点必须满足 <code>CONNECT BY</code> 条件(与其对应的根节点)</p></li><li><p><code>Oracle</code> 继续向下查找寻找子节点, 首先选择步骤2中找到的节点，然后选择这个节点的孩子节点(Children), 而且这些节点都是通过 <code>CONNECT BY</code> 条件找到的。</p></li><li><p>如果查询中有 <code>WHERE</code> 且没有 <code>join</code>, <code>Oracle</code> 获取所有的行, 并且排除掉所有不满足 <code>WHERE</code> 条件的结果行。<code>Oracle</code> 对每一行分别执行此条件，而不是删除不满足该条件的行的所有子级</p></li><li><p>按照顺序返回, 所有的孩子节点都在父节点下边</p></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> c.name                                               公司，</span><br><span class="line">                         p.parent_id                                          上级合作伙伴节点标识，</span><br><span class="line">                         p1.code                                              上级合作伙伴编码，</span><br><span class="line">                         p1.name                                              上级合作伙伴名称，</span><br><span class="line">                         p.id                                                 合作伙伴标识，</span><br><span class="line">                         p.code                                               合作伙伴编码，</span><br><span class="line">                         p.name                                               合作伙伴名称，</span><br><span class="line">                         <span class="keyword">connect_by_iscycle</span>                                   <span class="keyword">cycle</span>,</span><br><span class="line">                         <span class="keyword">decode</span>(p.status, <span class="number">1</span>, <span class="string">&#x27;有效&#x27;</span>, <span class="string">&#x27;无效&#x27;</span>)                      状态，</span><br><span class="line">                         sys_connect_by_path(p1.code, <span class="string">&#x27;&lt;-&#x27;</span>) || <span class="string">&#x27;&lt;-&#x27;</span> || p.code 合作伙伴路径，</span><br><span class="line">                         <span class="keyword">level</span>                                                重复级别</span><br><span class="line">         <span class="keyword">FROM</span> boss_partner.partner p</span><br><span class="line">                  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boss_partner.partner p1 <span class="keyword">ON</span> p.parent_id = p1.id</span><br><span class="line">                  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boss_system.company c <span class="keyword">ON</span> p.company_id = c.id</span><br><span class="line">         <span class="keyword">START</span> <span class="keyword">WITH</span> p.parent_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> p.parent_id</span><br><span class="line">                                    <span class="keyword">FROM</span> boss_partner.partner p</span><br><span class="line">                                    <span class="keyword">WHERE</span> p.parent_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">                                      <span class="keyword">AND</span> p.status = <span class="number">1</span>)</span><br><span class="line">         <span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">NOCYCLE</span> <span class="keyword">PRIOR</span> p.id = p.parent_id)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">cycle</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ol><li><code>PRIOR</code> 是一元运算</li><li><code>CONNECT BY</code> 条件不能包含子查询</li><li>如果 <code>CONNECT BY</code> 导致查询结构陷入循环，那么会抛出一个异常, 即一个节点既是父节点，同样也是子节点</li><li>在层级查询中，不能指定 <code>ORDER BY</code> 或者 <code>GROUP BY</code>, 否则会破坏 <code>CONNECT BY</code> 结果的层级顺序，想要查询拥有同一个父节点的所有层级关系，使用 <code>ORDER SIBLINGS BY</code> 条件</li><li><code>CONNECT BY</code> 条件中 <code>NO CYCLE</code> 参数会在有循环的情况下返回查询的结果行, <code>CONNECT_BY_ISCYCLE</code> 伪列会返回存在环的行</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, employee_id, manager_id, <span class="keyword">LEVEL</span></span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">START</span> <span class="keyword">WITH</span> employee_id = <span class="number">100</span></span><br><span class="line">      <span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">PRIOR</span> employee_id = manager_id</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">SIBLINGS</span> <span class="keyword">BY</span> last_name;</span><br></pre></td></tr></table></figure><h4 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h4><p><img src="" alt="" /><br /><code>Oracle</code> <code>SQL</code> 中的层级结构查询使用 <code>START WITH</code> 和 <code>CONNECT BY … PIROR</code> 字段实现，一般情况下，递归循环分为两种，一种是自上而下进行查找，另外一种方式是自下而上进行查找。</p><ol><li><p>自上而上进行查找</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> boss_partner.partner p</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> p.id = ?</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">PRIOR</span> p.parent_id = p.id</span><br></pre></td></tr></table></figure></li><li><p>自下而上进行查找</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> boss_partner.partner p </span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> p.parent_id = ?</span><br><span class="line">  <span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">PRIOR</span> p.id = p.parent_id</span><br></pre></td></tr></table></figure></li><li><p>查找中存在环路</p></li><li><p>一些参数的解释</p><ul><li><code>connect_by_iscycle</code> 该参数用来判断递归中是否存在环，</li><li><code>connect_by_isleaf</code> 该参数用来判断当前节点是否是叶子节点, 树节点能否继续展开。</li><li><code>level</code> 伪列, <code>root</code> 标识 level 1</li><li>sys_connect_by_path, 当且仅当层级查询时有效, 查询结果返回一条从根节点到某个节点的路径, <code>colunm</code> 和 <code>char</code> 可以是任意类型<pre>sys_connect_by_path::= <b>SYS_CONNECT_BY_PATH</b>(column, char)</pre>    </li></ul></li></ol><h3 id="oracle-rownum"><a class="markdownIt-Anchor" href="#oracle-rownum"></a> Oracle Rownum</h3><ol><li><code>Oracle</code> 中的 <code>rownum</code> 参数用来限定查询结果返回行数</li><li>当 <code>SQL</code> 中既有排序, 又有 <code>rownum</code> 限定行数, 如果直接在 <code>WHERE</code> 条件中使用 <code>rownum&lt;=2</code>, 那么该结果不是排序之后返回的结果, 而是先查出2条数据, 然后进行排序</li><li>错误示例与正确示例</li><li>正确示例中，必须将所有的字段全部标出, 与子查询中的字段一一对应, 且字段名字不能重复</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 错误示例</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> tablexxx t</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rownum</span> &lt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.create_isntant <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正确示例</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> t.id <span class="keyword">id</span>, t.name <span class="keyword">name</span></span><br><span class="line">         <span class="keyword">FROM</span> tablexxx t</span><br><span class="line">         <span class="keyword">ORDER</span> <span class="keyword">BY</span> t.create_instant <span class="keyword">DESC</span>) s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rownum</span> &lt;= <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="oracle-left-join"><a class="markdownIt-Anchor" href="#oracle-left-join"></a> Oracle Left Join</h3><p><code>SQL</code> 中 <code>LEFT JOIN</code> 无论如何都会返回左表中所有的行, 即使在右表中没有任何匹配的行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> product p <span class="keyword">ON</span> p.employee_id = e.id </span><br></pre></td></tr></table></figure><p>以上, <code>LEFT JOIN</code> 中 ON 条件只有一个, 所以结果没有问题, 将 <code>product</code> 表与 <code>employee</code> 表进行关联, 但是当查询条件包含多个不同的 <code>ON</code> 条件时:</p><ol><li>ON 条件中只有第一个条件生效</li><li>如果想要其余的条件生效, 需要将其余条件放在 <code>WHERE</code> 条件中, 此时 <code>LEFT JOIN</code> 相当于 <code>INNER JOIN</code> 查询</li></ol><p>当数据库通过两张表或者多张表查询所需要的结果是, 都会生成一张中间记录表, <code>ON</code> 中所有的条件都是用来生成中间记录的, <code>WHERE</code> 条件在最后过滤结果时生效</p><div class="note info modern"><p><code>ON</code>条件是在生成临时表时使用的条件，它不管 <code>ON</code> 中的条件是否为真，都会返回左边表中的记录, 这也就是为什么左连接的结果可能并不是我们想要的, 计数出现问题, 或者数据中出现 <code>NULL</code> 值</p></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这样可能会出现右表为空的情况(当右表的数据与左表没有匹配), 但是左表数据不变</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> product p <span class="keyword">ON</span> p.employee_id = e.id <span class="keyword">AND</span> e.id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这样相当于 INNER JOIN 内连接, WHERE 条件用来过滤产生的临时表结果</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> product p <span class="keyword">ON</span> p.employee_id = e.id </span><br><span class="line"><span class="keyword">WHERE</span> e.id = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="sql-字符串截取函数"><a class="markdownIt-Anchor" href="#sql-字符串截取函数"></a> SQL 字符串截取函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">&#x27;12345678&#x27;</span>, <span class="number">-8</span>, <span class="number">8</span>) <span class="keyword">FROM</span> dual; <span class="comment">--运行结果：&#x27;12345678&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">&#x27;12345678&#x27;</span>, <span class="number">-9</span>, <span class="number">9</span>) <span class="keyword">FROM</span> dual; <span class="comment">--运行结果：null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="literal">null</span> <span class="keyword">like</span> <span class="string">&#x27;%019&#x27;</span>;  <span class="comment">--无运行结果</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">WHERE</span> <span class="string">&#x27;019&#x27;</span> <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span> || <span class="literal">null</span> <span class="comment">--运行结果：1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Web 返回值处理</title>
      <link href="posts/51bf75dc/"/>
      <url>posts/51bf75dc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18029.jpg" alt="18029" /></p><h3 id="数据响应与内容协商"><a class="markdownIt-Anchor" href="#数据响应与内容协商"></a> 数据响应与内容协商</h3><p>响应数据</p><ul><li>响应页面</li><li><code>Json</code>, <code>Xml</code>, xls, 图片视频, 自定义协商内容</li></ul><hr /><h4 id="响应json数据"><a class="markdownIt-Anchor" href="#响应json数据"></a> 响应json数据</h4><ol><li>如何使用<br />使用 <code>json.jar + @ResponseBody</code>, 想导入相关依赖(其实已经导入), 然后在方法上添加 <code>@ResponseBody</code> 注解</li></ol> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jdk8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-parameter-names<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="响应-json-数据原理"><a class="markdownIt-Anchor" href="#响应-json-数据原理"></a> 响应 Json 数据原理</h4><ol><li>进入 <code>DispatcherServlet.java</code> 文件中的 <code>doDispatch</code> 方法</li><li>拿到 <code>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler())</code>;</li><li>真正的执行 <code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler())</code>;</li><li><code>handle</code> 方法内部实现中 <code>handleInternal()</code> 继续进行处理</li><li>然后执行 <code>invokeHandlerMethod()</code> 执行 handler 方法</li><li>在 <code>invokeHandlerMethod()</code> 中既有参数解析器 <code>argumentResolvers</code>, 又有返回值解析器 <code>returnValueHandlers</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">    invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回值解析器用来处理返回值, 也就是如何使得响应的数据变为 <code>Json</code> 数据</li><li><code>HandlerMethodReturnValueHandler</code> 有很多中不同的返回值解析器<br /><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/HandlerMethodReturnValueHandler.jpg" alt="HandlerMethodReturnValueHandler" /></li><li>然后执行 <code>invocableMethod.invokeAndHandle(webRequest, mavContainer)</code>; 894行</li><li><code>Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs)</code>; 用来获得参数的值, 上一篇博客内容</li><li>取到参数值之后, 判断返回值是否为空, 执行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">        returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先获取返回值类型, 然后处理返回值, </span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 判断哪个处理值能够处理, 2. 处理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 判断哪个处理器能够处理</span></span><br><span class="line">    HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回值处理器 <code>HandlerMethodReturnValueHandler</code> 是一个接口, 主要实现了两个方法：<br /><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/1609253807673.jpg" alt="1609253807673" /></li><li>返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType()</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用增强 for 循环进行判断, 每一种返回值解析器根据不同的条件进行判断</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title">selectHandler</span><span class="params">(<span class="meta">@Nullable</span> Object value, MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isAsyncValue = isAsyncReturnValue(value, returnType);</span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="keyword">this</span>.returnValueHandlers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回值处理器调用处理方法 <code>handleReturnValue</code>, 不同的返回值调用不同的处理方法</li><li>对于 <code>@Responsebody</code> 来说<br />返回值处理器支持的方法是:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要标注了 @ResponseBody 标注就可以返回</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) ||</span><br><span class="line">            returnType.hasMethodAnnotation(ResponseBody.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>返回值处理器调用的方法是：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RequestResponseBodyMethodProcessor 来进行处理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">    ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">    ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line">    <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">    <span class="comment">// 使用消息转换器进行写出操作</span></span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr /><h4 id="httpmessageconverter-原理"><a class="markdownIt-Anchor" href="#httpmessageconverter-原理"></a> HTTPMessageConverter 原理</h4><p>接上文</p><ol><li><p><code>writeWithMessageConverters()</code> 方法处理, 利用 <code>MessageConverters</code> 进行数据处理, 将数据写成 <code>Json</code></p></li><li><p>内容协商见下</p></li><li><p>内容协商之后的操作, 首先可以拿到 </code>selectedMediaType</code>, 选中的协商内容</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">    selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">    <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line">        GenericHttpMessageConverter genericConverter = (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ?</span><br><span class="line">                (GenericHttpMessageConverter&lt;?&gt;) converter : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span> ?</span><br><span class="line">                ((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class="line">                converter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class="line">            body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class="line">                    (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">                    inputMessage, outputMessage);</span><br><span class="line">            <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object theBody = body;</span><br><span class="line">                LogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class="line">                        <span class="string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                <span class="keyword">if</span> (genericConverter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    genericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Nothing to write: null body&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Spring MVC</code> 会按个遍历所有底层的 <code>messageConverters</code>, 看谁能处理这样的消息</p></li></ol><hr /><h4 id="httpmessageconverter"><a class="markdownIt-Anchor" href="#httpmessageconverter"></a> HttpMessageConverter</h4><p><code>HttpMessageConverter</code> 规范:</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/HttpMessageConverter.jpg" alt="HttpMessageConverter" /></p><p>看是否支持将此 <code>Class</code> 类型的对象, 转为 <code>MediaType</code> 类型的数据</p><p>例子： <code>Person</code> 转 <code>Json</code>(响应) 或者 <code>Json</code> 转 <code>Person</code>(请求)<br />例子：<code>canRead()</code> 能否将读入的 <code>Person</code> 转为 <code>Json</code> 数据</p><p>默认的 messageConverters:</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/messageConverters.jpg" alt="messageConverters" /></p><h4 id="内容协商"><a class="markdownIt-Anchor" href="#内容协商"></a> 内容协商</h4><p>浏览器默认会以请求头的方式告诉服务器它能接收什么样的内容类型</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/1609255308496.jpg" alt="浏览器请求头" /></p><p><code><em>/</em></code> 表示能接收所有的东西, <code>q</code> 表示权重, 优先接收权重大的内容</p><p>服务器最终根据自己自身的能力, 决定服务器最终能生产出什么类型的数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">MediaType contentType = outputMessage.getHeaders().getContentType();</span><br><span class="line"><span class="keyword">boolean</span> isContentTypePreset = contentType != <span class="keyword">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class="line"><span class="keyword">if</span> (isContentTypePreset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class="string">&quot;&#x27; in response&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取之前的选中的媒体类型</span></span><br><span class="line">    selectedMediaType = contentType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则拿到原生请求</span></span><br><span class="line">    HttpServletRequest request = inputMessage.getServletRequest();</span><br><span class="line">    <span class="comment">// 浏览器可以接受的类型</span></span><br><span class="line">    List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line">    <span class="comment">// 服务器能响应的类型</span></span><br><span class="line">    List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotWritableException(</span><br><span class="line">                <span class="string">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 服务器和浏览器进行协商</span></span><br><span class="line">    <span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">                mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据客户端接收能力不同, 返回不同媒体类型的数据</p><ol><li>首先导入支持 <code>xml</code> 的依赖</li><li>只要改变请求头中 <code>Accept</code> 字段, <code>Http</code> 协议中规定的, 告诉服务器本客户端可以接收的数据类型<ul><li>appliction/json</li><li>application/xml</li></ul></li></ol><hr /><h4 id="浏览器参数方式内容协商功能"><a class="markdownIt-Anchor" href="#浏览器参数方式内容协商功能"></a> 浏览器参数方式内容协商功能</h4><p>为了方便内容协商, 开启基于请求参数的内容协商功能</p><ol><li>开启基于请求参数的内容协商, <code>spring</code> 配置 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.mvc.contentnegotiation.favor-parameter=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></li><li>请求连接书写时携带 <code>format=xml/json</code></li><li>内容协商管理器多了一条基于参数的内容协商策略 <code>ParameterContentNegotiationStrategy</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ParameterContentNegotiationStrategy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterContentNegotiationStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractMappingContentNegotiationStrategy</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> String parameterName = <span class="string">&quot;format&quot;</span>;</span><br><span class="line"><span class="comment">// 而请求参数重有一个参数叫做 format</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getMediaTypeKey</span><span class="params">(NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request.getParameter(getParameterName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>ParameterContentNegotiationStrategy</code> 策略优先确定是要返回 <code>Json</code> 数据(请求头中的 <code>format</code> 值)</li></ol><hr /><h4 id="内容协商原理"><a class="markdownIt-Anchor" href="#内容协商原理"></a> 内容协商原理</h4><ol><li>判断当前响应头中是否有确定的媒体类型,  <code>MediaType</code></li><li>获取客户端(浏览器, <code>PostMan</code>)支持的内容类型,  获取客户端 <code>Accept</code> 请求头字段 <code>application/xml</code>, <code>AbstractMessageConverterMethodProcessor</code> 216行</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line"><span class="comment">// 使用内容协商管理器 contentNegotiationManager,  默认使用基于请求头的策略确定客户端可以接收的内容类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderContentNegotiationStrategy</span> <span class="keyword">implements</span> <span class="title">ContentNegotiationStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">resolveMediaTypes</span><span class="params">(NativeWebRequest request)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> HttpMediaTypeNotAcceptableException </span>&#123;</span><br><span class="line"></span><br><span class="line">String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);</span><br><span class="line"><span class="keyword">if</span> (headerValueArray == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; headerValues = Arrays.asList(headerValueArray);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;MediaType&gt; mediaTypes = MediaType.parseMediaTypes(headerValues);</span><br><span class="line">MediaType.sortBySpecificityAndQuality(mediaTypes);</span><br><span class="line"><span class="keyword">return</span> !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvalidMediaTypeException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(</span><br><span class="line"><span class="string">&quot;Could not parse &#x27;Accept&#x27; header &quot;</span> + headerValues + <span class="string">&quot;: &quot;</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>遍历循环所有当前系统的 <code>GenericHttpMessageConverter</code>, 看谁支持操作这个对象 <code>Person</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br></pre></td></tr></table></figure></li><li>找到支持操作 <code>Person</code> 的 <code>converter</code>, 然后把 <code>converter</code> 支持的媒体类型统计出来<br /><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/GenericHttpMessageConverter.jpg" alt="GenericHttpMessageConverter" /></li><li>客户端需要 [application/xml], 服务端的能力 [10] 种。</li><li>进行内容协商的最佳匹配, 拿到浏览器想要的的和当前系统支持的类型 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>用支持将对象转为最佳匹配媒体类型的 <code>convert</code> 调用它转换为 <code>xml</code></li><li>为什么浏览器响应 <code>xml</code> 数据, 是因为 <code>xml</code> 最佳匹配的优先级最高</li></ol><hr /><h4 id="自定义-messageconverter"><a class="markdownIt-Anchor" href="#自定义-messageconverter"></a> 自定义 MessageConverter</h4><p>实现多协议数据兼容：</p><ol><li><code>@ResponseBody</code> 响应数据, 调用 </code>RequestResponseBodyMethodProcessor</code> 处理</li><li><code>Processor</code> 处理方法返回值, 通过 <code>MessageConverter</code> 处理</li><li>所有的 <code>MessageConverter</code> 合起来可以支持各种媒体类型数据的操作(读, 写)</li><li>内容协商找到最佳的 <code>messageConverter</code></li><li>自定义 <code>messageConverter</code>, 修改 <code>Spring Mvc</code> 功能, 给容器中添加一个 <code>WebMvcConfiger()</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">            converters.add(<span class="keyword">new</span> AppConverter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Media;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义 MessageConverter</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> caolp</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">Class</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 把 clazz 数据读成 mediaType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mediaType</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取所有支持的媒体类型, 服务器要统计所有MessageConverter 都能写出哪些内容类型</span></span><br><span class="line"><span class="comment">    * application/app</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; read(Class&lt;? extends Class&lt;?&gt;&gt; clazz, HttpInputMessage inputMessage) <span class="keyword">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义数数据写出</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> aClass</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> outputMessage</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> HttpMessageNotWritableException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Class&lt;?&gt; aClass, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        String data = aClass.toString() + <span class="string">&quot;;&quot;</span> + aClass.getName();</span><br><span class="line">        OutputStream body = outputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>请求的场景：</p><ol><li>浏览器发起请求直接返回 <code>xml</code>   [application/xml]  <code>jacksonXmlConverter</code></li><li>如果是 <code>ajax</code> 请求, 返回 <code>Json</code>   [application/json]  <code>jacksonJsonConverter</code></li><li>如果是 <code>app</code> 发起请求, 返回自定义协议数据  [application/x-app]  <code>xxxConverter</code><br />规定为：属性值1;属性值2</li></ol><p>步骤；</p><ol><li>添加一个自定义的 <code>messageconverter</code> 进入系统底层</li><li>系统底层就会统计出所有的 <code>messageconverter</code> 能操作哪些类型</li><li>客户端内容协商 [app —&gt; app]</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Web 请求参数处理</title>
      <link href="posts/d8220296/"/>
      <url>posts/d8220296/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18005.jpg" alt="18005" /></p><h3 id="请求参数处理"><a class="markdownIt-Anchor" href="#请求参数处理"></a> 请求参数处理</h3><ol><li>xxxMapping</li><li>Rest风格，使用HTTP请求方式的动词来表示对资源的操作，但是表单只能提交 GET 和 POST请求</li><li>核心 <code>Filter</code>: <code>HiddentHttpMethodFilter</code><ul><li>用法：表单 <code>method-post</code>(必须), 隐藏域 <code>_method = put/delete</code></li></ul> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="comment">// 容器中没有 HiddenHttpMethodFilter.class, 使用下边 new OrderedHiddenHttpMethodFilter(), 条件成立</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line">   <span class="comment">// 配置文件中 spring.mvc.hiddenmethod.filter.enable 默认为 false，需要手动开启</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.mvc.hiddenmethod.filter.enable</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment">#开启页面表单的 Request </span></span><br></pre></td></tr></table></figure></li></ol><h4 id="rest-原理"><a class="markdownIt-Anchor" href="#rest-原理"></a> REST 原理</h4><p>表单提交使用 <code>REST</code> 的时候</p><ol><li>表单提交 = <code>PUT/DELETE</code></li><li>请求过来被 <code>HiddenHttpMethodFilter</code> 拦截<ul><li>请求是否正常，并且为 <code>POST</code></li><li>获取 <code>_method</code> 的值，是 <code>GET/POST/PUT/DELETE</code>，可以大写，也可以小写</li><li>兼容以下请求 <code>GET/POST/PUT/DELETE</code></li><li>原生 <code>request(post)</code>, 使用包装模式 <code>requestWarpper</code> 重写了 <code>getMethod()</cpde> 方法。放回的是传入的值</li><li>过滤器放行的是用 <code>warpper</code>，以后的方法调用 <code>getmethod</code> 是调用 <code>requestWarpper</code> 的</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest requestToUse = request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            <span class="comment">// 隐藏域 _method = put/delete</span></span><br><span class="line">            String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Rest</code>请求，使用客户端工具<br />PostMan:<br />不使用上述方式，可以直接发送 PUT/DELETE</p><p><code>RequestMapping == GetMapping/PutMapping/DeleteMapping/PostMapping</code></p><h4 id="修改-_method"><a class="markdownIt-Anchor" href="#修改-_method"></a> 修改 _method</h4><p>写一个 <cpde>HiddenHttpMethodFilter</code>， 然后设置 <code>setMethodParam</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caolp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HiddenHttpMethodFilter methodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求映射原理"><a class="markdownIt-Anchor" href="#请求映射原理"></a> 请求映射原理</h4><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/1609078890555.jpg" alt="请求映射原理结构图" /></p><p><code>Spring MVC</code> 功能分析：每个请求都会从 <code>org.springframework.web.servlet.DispatcherServlet -&gt; doDispatch()</code> 方法请求。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 包装</span></span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 是否异步</span></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 处理文件上传请求</span></span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">                <span class="comment">//决定当前请求使用哪一个 handler(Contorller的方法)</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">                <span class="meta">@Nullable</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">// 获取所有的 handlerMappings，处理器映射</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">                            HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">                            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> handler;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p><code>handlerMappings</code> 有5个,分别是：</p><ol><li>RequestMappingHandlerMapping<br />保存了所有的 <code>@RequestMapping</code> 和 <code>handler</code> 的映射规则，<code>Spring Boot</code> 启动时, 会将所有的 <code>RequestMaping</code> 注解标注的全部扫描出来并保存在 <code>RequestMappingHandlerMapping</code> 中的 <code>mappingRegistry</code> 中</li><li>welcomePageHandlerMapping<br />欢迎页处理</li><li>BeanNameUrlHandlerMapping</li><li>RouteFunctionMapping</li><li>SimpleUrlHandlerMapping</li></ol><ul><li><code>Spring Boot</code> 自动配置欢迎页的 <code>welcomePageHandlerMapping</code> / 能访问到 index.html</li><li><code>Spring Boot</code> 自动配置了默认的 <code>RequestMappingHandlerMapping</code></li><li>所有的请求映射都在 <code>HalderMapping</code> 中，<ul><li>请求进来挨个尝试 <code>HandlerMapping</code> 看是否有请求信息</li><li>如果有，就找到这个请求对应的 <code>handler</code></li><li>如果没有就是下一个 <code>handlerMapping</code></li></ul></li><li>我们需要一些自定义的映射处理，我们可以自己给容器中放 <code>handlerMapping</code>, 自定义 <code>handlerMapping</code></li></ul><h4 id="各种类型注解原理"><a class="markdownIt-Anchor" href="#各种类型注解原理"></a> 各种类型注解原理</h4><p>如何解析出每一个参数, 从 DispatcherServlet 中的 disPatch() 方法进入</p><ol><li>从 Handlermapping 中找到能处理请求的 Handler (也就是 Controller 中的 method)</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure><ol start="2"><li>为当前的 Handler 找一个适配器 HandlerAdapter (Sping 底层设计的一个接口)</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"><span class="comment">// Handler 是一个接口, 主要实现了以下几个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Given a handler instance, return whether or not this &#123;@code HandlerAdapter&#125;</span></span><br><span class="line"><span class="comment">    * can support it. Typical HandlerAdapters will base the decision on the handler</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Use the given handler to handle this request.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的 HandlerAdapter 共有四种 this.handlerAdapters:</p><ul><li>RequestMappingHandlerAdapter</li><li>HandlerFunctionAdapter</li><li>HttpRequestHandlerAdapter</li><li>SimpleControllerHandlerAdapter</li></ul><ol start="3"><li>Controller 中 @Requesting 标注的方法方法会默认找到 RequestingMappingHandlerAdapter, 为当前请求先找到一个适配器, 然后将适配器返回。</li><li>真正的执行 Handler</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><ul><li>先得到目标 handler</li><li>然后进入 RequestMappingHandlerAdapter 执行 handleInternal 方法, 774行</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    checkRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">            <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">            applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            prepareResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>invokeHandlerMethod 方法内部有 argumentResolvers 参数解析器, 所有的参数解析器(共26个): 861行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/argumentResolvers.jpg" alt="参数解析器" /></p><p>用来确定将要执行的目标方法的每一个参数值是什么</p><p>SpringMVC 能写多少中参数类型，取决于参数解析器的类型</p><ul><li>参数解析器接口分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/HandlerMethodArgumentResolver.jpg" alt="HandlerMethodArgumentResolver" /></p><ol><li>当前解析器是否支持解析这种参数</li><li>支持就调用 resolveArgument 方法来进行解析</li></ol><ul><li>执行并处理</li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入方法 invokeAndHandle 分析, 真正执行目标方法, 执行完之后直接就到 Controller 层中</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续进入执行方法 invokeForRequest, 获取方法参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入方法 getMethodArgumentValues, 如何确定目标方法的每个值</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">                                             Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">// 获取方法的所有参数声明，注解，索引位置，类型，详细信息</span></span><br><span class="line">      MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">      <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">          <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// args 会返回, 确定好的值</span></span><br><span class="line">      Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 取第 i 个参数</span></span><br><span class="line">          MethodParameter parameter = parameters[i];</span><br><span class="line">          parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">          args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">          <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 判断当前解析器是否支持解析这种类型的参数</span></span><br><span class="line">          <span class="comment">// 26个参数解析器</span></span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 核心代码！！！！！</span></span><br><span class="line">              args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">              <span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line">              <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                  String exMsg = ex.getMessage();</span><br><span class="line">                  <span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">                      logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">throw</span> ex;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> args;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挨个判断那个支持解析该参数</span></span><br><span class="line"><span class="comment">// 解析这个参数的值</span></span><br></pre></td></tr></table></figure><h4 id="关键信息"><a class="markdownIt-Anchor" href="#关键信息"></a> 关键信息</h4><ol><li>HandlerAdapter</li></ol><ul><li>RequestMappingHandlerAdapter 支持方法上标注 @RequestMapping</li><li>HandlerFunctionAdapter 支持函数式编程</li></ul><ol start="2"><li>执行目标方法 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure></li><li>执行 hanlder 方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line"><span class="comment">// invokeHandlerMethod 内部 argumentResolvers 参数解析器, 所有的参数解析器(共26个)</span></span><br><span class="line"><span class="comment">// invokeHandlerMethod 内部 returnValueHandlers 返回值处理器，所有的返回值解析器共有16个</span></span><br><span class="line"><span class="comment">// 将参数解析器和返回值处理器都放入到 ServletInvocableHandlerMethod 包装好的处理方法中。</span></span><br><span class="line"><span class="comment">// 执行并处理</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入方法 invokeAndHandle 分析, 真正执行目标方法, 执行完之后直接就到 Controller 层中</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续进入执行方法 invokeForRequest, 获取方法参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getMethodArgumentValues 中判断当前解析器是否支持解析这种类型的参数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">    HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                result = resolver;</span><br><span class="line">                <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用这种解析器进行解析解析</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">        NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到当前参数的解析器</span></span><br><span class="line">    HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unsupported parameter type [&quot;</span> +</span><br><span class="line">                parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设参数为 @PathVariable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!parameter.hasParameterAnnotation(PathVariable.class)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) &#123;</span><br><span class="line">        PathVariable pathVariable = parameter.getParameterAnnotation(PathVariable.class);</span><br><span class="line">        <span class="keyword">return</span> (pathVariable != <span class="keyword">null</span> &amp;&amp; StringUtils.hasText(pathVariable.value()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析这种类型参数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">        NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数的详细信息</span></span><br><span class="line">    NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);</span><br><span class="line">    MethodParameter nestedParameter = parameter.nestedIfOptional();</span><br><span class="line">    <span class="comment">// 解析参数的名字！！！！</span></span><br><span class="line">    Object resolvedName = resolveEmbeddedValuesAndExpressions(namedValueInfo.name);</span><br><span class="line">    <span class="keyword">if</span> (resolvedName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;Specified name must not resolve to null: [&quot;</span> + namedValueInfo.name + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析参数的值！！！！</span></span><br><span class="line">    Object arg = resolveName(resolvedName.toString(), nestedParameter, webRequest);</span><br><span class="line">    <span class="keyword">if</span> (arg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (namedValueInfo.defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (namedValueInfo.required &amp;&amp; !nestedParameter.isOptional()) &#123;</span><br><span class="line">            handleMissingValue(namedValueInfo.name, nestedParameter, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        arg = handleNullValue(namedValueInfo.name, arg, nestedParameter.getNestedParameterType());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(arg) &amp;&amp; namedValueInfo.defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binderFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        WebDataBinder binder = binderFactory.createBinder(webRequest, <span class="keyword">null</span>, namedValueInfo.name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            arg = binder.convertIfNecessary(arg, parameter.getParameterType(), parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ConversionNotSupportedException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(),</span><br><span class="line">                    namedValueInfo.name, parameter, ex.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentTypeMismatchException(arg, ex.getRequiredType(),</span><br><span class="line">                    namedValueInfo.name, parameter, ex.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Check for null value after conversion of incoming argument value</span></span><br><span class="line">        <span class="keyword">if</span> (arg == <span class="keyword">null</span> &amp;&amp; namedValueInfo.defaultValue == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                namedValueInfo.required &amp;&amp; !nestedParameter.isOptional()) &#123;</span><br><span class="line">            handleMissingValue(namedValueInfo.name, nestedParameter, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析名字</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">resolveEmbeddedValuesAndExpressions</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.configurableBeanFactory == <span class="keyword">null</span> || <span class="keyword">this</span>.expressionContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    String placeholdersResolved = <span class="keyword">this</span>.configurableBeanFactory.resolveEmbeddedValue(value);</span><br><span class="line">    BeanExpressionResolver exprResolver = <span class="keyword">this</span>.configurableBeanFactory.getBeanExpressionResolver();</span><br><span class="line">    <span class="keyword">if</span> (exprResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exprResolver.evaluate(placeholdersResolved, <span class="keyword">this</span>.expressionContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析值</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveName</span><span class="params">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; uriTemplateVars = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class="line">            HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">    <span class="keyword">return</span> (uriTemplateVars != <span class="keyword">null</span> ? uriTemplateVars.get(name) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Web 静态资源处理</title>
      <link href="posts/daaed3e6/"/>
      <url>posts/daaed3e6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/202012271710.jpg" alt="202012271710" /></p><h3 id="静态资源"><a class="markdownIt-Anchor" href="#静态资源"></a> 静态资源</h3><h4 id="静态资源目录"><a class="markdownIt-Anchor" href="#静态资源目录"></a> 静态资源目录</h4><p>需要将静态资源放在类路径下：</p><ol><li><code> /static </code></li><li><code> /public </code></li><li><code> /resources </code></li><li><code> META-INF/resources </code><br />路径：当前项目根路径 + /静态资源名</li></ol><p>原理： 静态映射 “/**”，拦截所有的请求，当请求进入时，先去看 <code>Controller</code> 能不能处理，不能处理的所有请求交给静态资源处理器，都不能处理返回404页面。</p><h4 id="静态资源访问前缀"><a class="markdownIt-Anchor" href="#静态资源访问前缀"></a> 静态资源访问前缀</h4><p>一个 webMvc 应用，有很多的动态请求，<code>/**</code> 是将所有的请求都拦截，包括静态资源请求，所以需要将静态请求的前缀改掉，让静态资源请求放行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">    <span class="comment"># Path pattern used for static resources.</span></span><br><span class="line">    <span class="attr">mvc:</span></span><br><span class="line">      <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">    <span class="comment"># 改变默认的静态资源存放路径</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/resources_change</span></span><br></pre></td></tr></table></figure><p>访问路径：当前项目 + static-path-pattern + 静态资源名字</p><p>静态资源路径： 将静态资源放在 </code> classpath:/resources_change </code> 下</p><h4 id="webjars-访问"><a class="markdownIt-Anchor" href="#webjars-访问"></a> webjars 访问</h4><ol><li>引入相应的 webjars</li><li>访问路径： localhost:8080/webjars/**/…，按照依赖的包路径访问</li></ol><h3 id="静态资源配置原理"><a class="markdownIt-Anchor" href="#静态资源配置原理"></a> 静态资源配置原理</h3><ol><li><p>Spring Boot 自动默认加载 xxxAutoConfiguration 类（自动配置类）</p></li><li><p>与 SpringMVC 相关的自动配置类是 WebMvcAutoConfiguration, 看该自动配置类是否生效。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="comment">// todo: 容器中没有 WebMvcConfigurationSupport.class</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">        ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>给容器中配置了什么。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件的相关属性与什么进行了绑定</p><ul><li>WebMvcProperties (spring.mvc)</li><li>ResourceProperties (spring.resources)</li></ul></li><li><p>资源处理的默认规则：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// webjars 规则</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信息点：</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">add-mappings:</span> <span class="string">fasle</span> <span class="comment">#禁用所有的静态资源规则</span></span><br><span class="line">        <span class="attr">cache:</span></span><br><span class="line">            <span class="attr">period:</span> <span class="number">11000</span> <span class="comment">#配置缓存</span></span><br></pre></td></tr></table></figure><p>静态资源默认位置：</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>欢迎页的配置</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//HandlerMapping, 处理器映射，保存了每一个 Handler 能处理哪些请求，每一个请求过来，利用反射调用该方法处理。</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">       WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">               <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">               <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">       welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">       <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">       ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">   <span class="comment">// 要使用欢迎页，只能使用 /**</span></span><br><span class="line">   <span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">       logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">       setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">       <span class="comment">// 调用 Controller /index 处理</span></span><br><span class="line">       logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">       setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><div class="note info modern"><p>info 一个配置类只有一个有参构造器，有参构造器所有参数的值都会从容器中确定</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. ResourceProperties resourceProperties 获取和 spring.resources 绑定的所有值的对象</span></span><br><span class="line"><span class="comment">//2. WebMvcProperties mvcProperties 获取和 spring.mvc 绑定的所有值的对象</span></span><br><span class="line"><span class="comment">//3. ListableBeanFactory beanFactory 找到容器工厂beanFactory</span></span><br><span class="line"><span class="comment">//4. HttpMessageConverters 找到所有的 HttpMessageConverters， todo:</span></span><br><span class="line"><span class="comment">//5. ResourceHandlerRegistrationCustomizer 找到资源处理器的自定义器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">    ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">    ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自动配置原理</title>
      <link href="posts/591b5c47/"/>
      <url>posts/591b5c47/</url>
      
        <content type="html"><![CDATA[<hr /><h3 id="spring-boot-自动配置原理"><a class="markdownIt-Anchor" href="#spring-boot-自动配置原理"></a> Spring Boot 自动配置原理</h3><p>每一个 </code>Spring Boot</code> 主程序应用上都有一个注解 <code>@SpringBootApplication</code>, 这个注解是由三个不同的注解组合而成，分别是:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="springbootconfiguration"><a class="markdownIt-Anchor" href="#springbootconfiguration"></a> @SpringBootConfiguration</h4><p><code>@SpringBootConfiguration</code> 有一个注解是 <code>@Configuration,</code> 代表当前是一个配置类<br /><code>@Configuration</code> 组件介绍</p><ol><li>给一个类上进行标注，表明这是一个配置类，配置类里使用 <code>@Bean</code> 标注在方法上给容器中添加组件，默认是单实例。</li><li>配置类本身也是组件</li><li><code>Spinrg Boot 2.0</code> 以后引入 <code>proxyBeanMethods</code>, 表示代理 Bean 的方法，从容器中拿还是调用方法</li><li>Full 模式，<code>proxyBeanMethods = true</code>: 外部无对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象，<code>EnhancerBySpringCGLIB</code> 被增强的 Spring 的代理对象，代理对象调用发法，Spring Boot 总会检查这个组件是否在组件中有，如果有则直接使用，保证组件单实例。</li><li>Lite 模式，<code>proxyBeanMethods = false</code>: 多次调用获得不同的方法。</li><li>用来解决组件依赖问题，Lite 优点，不会检查容器中是不是有这个组件，只是单单给组件注册组件，使用 Lite 模式, 否则使用 <code>Full</code> 模式。</li></ol><h4 id="componentscan"><a class="markdownIt-Anchor" href="#componentscan"></a> @ComponentScan</h4><p><code>@ComponentScan</code> 是一个包扫描，指定我们扫描哪些包里边的内容。<br />todo: @ComponentScan 注解</p><h4 id="enableautoconfiguration"><a class="markdownIt-Anchor" href="#enableautoconfiguration"></a> @EnableAutoConfiguration</h4><p><code>@EnableAutoConfiguration</code> 也是一个合成注解，分别是:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p>1-4注解都是语言注解，另外两个是自动配置的关键注解</p><ul><li><p>@AutoConfigurationPackage<br />自动配置包，源码分析，指定默认包规则，</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//通过 &lt;code&gt;Register()&lt;/code&gt; 来进行批量注册，将指定的一个包下的所有组件都导入进来？ MainApplication所在的包</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>@Import()</code> 利用 Registrar 给容器中批量导入组件，涉及到 <code>@Import()</code> 组件的高级用法， 导入组件源码为：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  metadata 注解的源信息</span></span><br><span class="line">register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Import(AutoConfigurationImportSelector.class)</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AutoConfigurationImportSelector()</span><br><span class="line"><span class="comment">// 利用 getAutoConfigurationEntry() 方法给容器中批量导入一些组件，获取所有配置的集合</span></span><br><span class="line">AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line"><span class="comment">// 获取所需要导入到容器中大的配置类</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"><span class="comment">// 使用 SpringFactoriesLoader 工厂加载器加载, 最终获得一个Map</span></span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span></span>&#123;&#125;</span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader)</span><br><span class="line"><span class="comment">// 从 &quot;META-INF/spring.factories&quot; 加载一个文件，默认扫描当前系统这个位置的所有文件，某些 jar 包下边的这个文件</span></span><br><span class="line"><span class="comment">// 核心是：spring-boot-autoconfigure-2.2.1.RELEASE.jar 里边的 META-INF/spring.factories</span></span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION)</span><br></pre></td></tr></table></figure><p></code>META-INF/spring.factories</code> 里边的 <code>Auto Configure</code> 共127个, 配置文件写死， <code>Spring Boss</code> 一启动，就要给容器中加载的配置类，</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="按需配置"><a class="markdownIt-Anchor" href="#按需配置"></a> 按需配置</h4><p>虽然127个场景的自动配置启动时候默认全部加载，但是 Spring Boot 会按需加载</p><p>需要将需要加载的类加载进来，所以并不是所有的自动配置都能生效</p><p>按照条件装配规则 <code>(@Conditional)</code>，最终会按需配置</p><p>只有条件生效时，自动配置才会生效。</p><h4 id="具体分析"><a class="markdownIt-Anchor" href="#具体分析"></a> 具体分析</h4><h4 id="aop-自动配置"><a class="markdownIt-Anchor" href="#aop-自动配置"></a> Aop 自动配置</h4><ul><li><p>Aop 自动配置已被导入</p><p>首先看主类是否生效，然后再看小类是否生效。</p></li></ul><h4 id="web-模块自动配置"><a class="markdownIt-Anchor" href="#web-模块自动配置"></a> Web 模块自动配置</h4><ul><li><p>DispatcherServletAutoConfiguration<br />选择 <code>DispatcherServletAutoConfiguration</code> 来进行自动配置分析</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  标识自动配置的顺序</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 配置生效的条件是必须是一个 WebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="comment">// 容器中必须包含 DispatcherServlet.class 这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="comment">// 自动配置必须要在 ServletWebServerFactoryAutoConfiguration.class 加载之后</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span></span><br><span class="line"><span class="comment">//以上条件全部满足之后 DispatcherServletAutoConfiguration 这个自动配置类才会生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletAutoConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">// 总类成功才看下边的小类</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 满足 DefaultDispatcherServletCondition 条件类，这个条件在源代码的下方，自己编写的条件类。</span></span><br><span class="line"><span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line"><span class="comment">// 系统中有 ServletRegistration 类型的组件</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="comment">// 开启配置属性绑定 WebMvcProperties</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; HttpProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">// @Bean 标识给容器中添加 DispatcherServlet 组件   </span></span><br><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DispatcherServlet <span class="title">dispatcherServlet</span><span class="params">(HttpProperties httpProperties, WebMvcProperties webMvcProperties)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 新建一个 DispatcherServlet</span></span><br><span class="line">DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line"><span class="comment">// 设置相关的属性</span></span><br><span class="line">dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">dispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails());</span><br><span class="line"><span class="comment">// 返回 dispatcherServlet</span></span><br><span class="line"><span class="keyword">return</span> dispatcherServlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 容器中有 MultipartResolver 类型的组件， 容器中应该没有</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line"><span class="comment">// 容器中没有名字是 multipartResolver 的组件</span></span><br><span class="line"><span class="comment">// 容器中有 MultipartResolver, 当名字并不是 multipartResolver。</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 给 @Bean 标注的方法传入了对象参数，这个参数会从容器中找</span></span><br><span class="line"><span class="comment">// 从容器中找一个 MultipartResolver 然后给 resolver 赋值，返回</span></span><br><span class="line"><span class="comment">// 即使配置了一个文件解析器，但是名字不是 multipartResolver。</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableConfigurationProperties(WebMvcProperties.class)</code> 详细解释：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line"><span class="number">1.</span> 开启 WebMvcProperties.classs 和配置文件的绑定功能，和配置文件中 spring.mvc 中的配置一一绑定</span><br><span class="line"><span class="number">2.</span> 把 WebMvcProperties.class 加入到组件中</span><br></pre></td></tr></table></figure><p>容器中加入了文件上传解析器， 分析见源代码。</p><p>即使用户配置了一个文件解析器，但是名字不是 <code>multipartResolver</code>，<code>Spring Boot</code> 会返回一个 <code>multipartResolver</code>， 防止用户配置的文件上传解析器不规范。</p></li><li><p>HttpEncodingAutoConfiguration</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpProperties.class)</span></span><br><span class="line"><span class="comment">// 是不是原生的 SERVLET 应用程序</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="comment">// 判断容器中是否有 CharacterEncodingFilter</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="comment">// 判断文件中是否有 spring.http.encodin 这个属性，如果没有也认为是配置了</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"></span><br><span class="line">然后容器中放置：</span><br><span class="line"><span class="comment">// 解决请求编码</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">// 容器中没有 CharacterEncodingFilter 这个配置</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring boot默认会在底层配置好所有的组件，但是如果用户配置了，那么以用户配置的优先。</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户配置事例</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncondingFilter <span class="title">filter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建一个 CharacterEncondingFilter， 然后给这个方法加入到容器中。</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ol><li><code>Spring Boot</code> 首先加载所有的自动配置类，<code>xxxAutoconfiguration</code></li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，<code>xxxProperties</code>，和配置文件绑定</li><li>生效的配置类就会给容器中装配很多的组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>只要用户有自己配置的，就以用户的配置优先</li><li>定制化配置<ul><li>用户自己 @Bean 替换底层的组件</li><li>修改配置文件，查看配置文件什么值</li></ul></li></ol><p>xxxAutoConfiguration 导入组件 --&gt; xxxProperties 取值 --&gt; applicaition.poperties 取值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置字符编码</span></span><br><span class="line"><span class="comment">// 从 properties 中获取字符编码，</span></span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line"><span class="comment">// properties 的来源 HttpProperties</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;<span class="keyword">this</span>.properties = properties.getEncoding();&#125;</span><br><span class="line"><span class="comment">// HttpProperties 绑定了配置文件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpProperties.class)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18003.jpg" alt="18003" /></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客备份与迁移</title>
      <link href="posts/c9eafdcf/"/>
      <url>posts/c9eafdcf/</url>
      
        <content type="html"><![CDATA[<p>之前使用 </code>Hexo</code> 和 </code>Github Pages</code> 搭建了 Hexo 博客，但是每次运行 <code>hexo g &amp;&amp; hexo g</code> 只是将生成的静态文件部署在 Github 上，所以如果想要对 Hexo 博客进行备份或者是迁移到其他的电脑上，就需要将 Hexo 生成的网站源文件也 push 到 Github 上，但是 master 分支主要是用来部署 hexo 静态文件的，主要体现在 <code>_config.yml</code> 中的 <code>deploy</code>的配置上，所以我们需要新建一个分支来对源码进行推送。</p><h3 id="主要步骤"><a class="markdownIt-Anchor" href="#主要步骤"></a> 主要步骤</h3><h4 id="预处理"><a class="markdownIt-Anchor" href="#预处理"></a> 预处理</h4><p>将项目文件中主题文件夹中的 <code>.git</code> 文件夹删除，避免在 push 操作中出现问题。然后在项目文件夹中新建 <code>.gitignore</code>文件，该文件的主要作用是剔除一些无需上传的文件或者文件夹，输入的内容为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="创建本地分支"><a class="markdownIt-Anchor" href="#创建本地分支"></a> 创建本地分支</h4><p>主要的命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash">创建hexo分支，用来存放源码</span></span><br><span class="line">git checkout -b hexo</span><br><span class="line"><span class="meta">#</span><span class="bash">git 文件添加</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash">git 提交</span></span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程仓库，github上的博客仓库</span></span><br><span class="line">git remote add origin git@github.com:RamboCao/RamboCao.github.io.git</span><br><span class="line"><span class="meta">#</span><span class="bash">push到hexo分支</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>此时，在 Github 远端有两个不同的分支，一个分支是 <code>master</code>, 另外一个分支是 <code>hexo</code>, 我们在书写代码的时候使用 <code>hexo</code> 分支，在提交源代码的时候使用 <code>hexo</code> 分支。</p><h4 id="执行部署"><a class="markdownIt-Anchor" href="#执行部署"></a> 执行部署</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这样会在 <code>master</code> 分支上对代码进行更新和部署。</p><hr /><h3 id="迁移代码"><a class="markdownIt-Anchor" href="#迁移代码"></a> 迁移代码</h3><p>该操作是将远程的代码 pull 到一台新的机器上边，直接拉取远端 <code>hexo</code> 分支上上的代码到本地。所以首先在本地新建一个文件夹 ***.</p><h4 id="github-安装与设置"><a class="markdownIt-Anchor" href="#github-安装与设置"></a> Github 安装与设置</h4><p>Github 仓库并没有新电脑的私钥，所以需要在新的电脑上生成一个私钥，然后在网页端新加入一个 <code>SSH Key</code>，新建私钥的命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;github账号邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后查看 <code>.ssh</code> 文件夹中<code>id_rsa.pub</code>内容复制到网页 Github 中新建的 <code>SSH Key</code>中。</p><h4 id="远程拉取特定分支代码"><a class="markdownIt-Anchor" href="#远程拉取特定分支代码"></a> 远程拉取特定分支代码</h4><p>选择创建好的文件夹，然后将远端的 <code>hexo</code> 分支的代码拉取到本地文件夹中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> -b &lt;远程指定分支&gt; &lt;远程仓库地址&gt; &lt;本地文件夹名&gt;</span></span><br><span class="line">git clone -b hexo git@github.com:RamboCao/RamboCao.github.io.git ./blog</span><br></pre></td></tr></table></figure><h4 id="安装npm依赖"><a class="markdownIt-Anchor" href="#安装npm依赖"></a> 安装npm依赖</h4><p>博客目录下安装下如下包，其中 <code>npm install</code> 会安装 <code>package.json</code> 文件中所有的包。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install gulp -g </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="更新多分支代码"><a class="markdownIt-Anchor" href="#更新多分支代码"></a> 更新多分支代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以使用 hexo c &amp;&amp; hexo g &amp;&amp; hexo d</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以使用自动部署脚本 glup build</span></span><br><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d </span><br><span class="line">gulp build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再将代码 push 到 hexo 分支，保证代码的完整</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update&#x27;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h4 id="安装一些其他的软件"><a class="markdownIt-Anchor" href="#安装一些其他的软件"></a> 安装一些其他的软件</h4><ul><li>PicGo</li><li>VS Code</li></ul><div class="note info modern"><p>新建 Page 自动打开 VS Code 需要配置新的路径，由于不同环境不一样，所以可以考虑在 <code>.gitignore</code>中设置</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pic Go</title>
      <link href="posts/c4fe5b8b/"/>
      <url>posts/c4fe5b8b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="posts/ab21860c/"/>
      <url>posts/ab21860c/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr /><h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h2><p>Hexo 优点:</p><ul><li>渲染速度快</li><li>支持 Markdown</li><li>一键部署</li><li>插件和可扩展性</li></ul><hr /><h3 id="hexo-安装"><a class="markdownIt-Anchor" href="#hexo-安装"></a> Hexo 安装</h3><h4 id="npm-安装"><a class="markdownIt-Anchor" href="#npm-安装"></a> npm 安装</h4><p>采用 npm 安装并且进行初始化, 由于npm的默认源下载较慢，所以可以更换下载源进行下载。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看npm的配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认源</span></span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 临时改变镜像源</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久设置为淘宝镜像源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 另一种方式，编辑 ~/.npmrc 加入下面内容</span></span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><div class="note info modern"><p>npm 包的全局模块路径和缓存路径进行设置</p></div><h4 id="npm-全局模块路径和缓存路径"><a class="markdownIt-Anchor" href="#npm-全局模块路径和缓存路径"></a> npm 全局模块路径和缓存路径</h4><p>先新建两个文件夹 <code>node_global</code> 和 <code>node_cache</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>然后在环境变量中找到 path 变量进行修改，修改值：<br /><code>C:/Users/[username]/AppData/Roaming/npm</code><br /><code>C:/Program Files/nodejs/node_cache</code></p><h4 id="git-安装"><a class="markdownIt-Anchor" href="#git-安装"></a> Git 安装</h4><ul><li>Git 仓库搭建规则：必须使用 <code>&lt;用户名&gt;.github.io</code>, 这样才能在部署的时候匹配到，直接访问 <a href="https://RamboCao.github.io">Github</a>.</li><li>然后在本地对 Git 进行配置即可</li></ul><h4 id="hexo-安装与发布到-github-pages"><a class="markdownIt-Anchor" href="#hexo-安装与发布到-github-pages"></a> Hexo 安装与发布到 Github Pages</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hexo框架的安装</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等上一个命令完成后，在输入下面的命令</span></span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure><p>Hexo 基本命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean     # Remove generated files and cache.</span><br><span class="line">hexo deploy    # Deploy your website.</span><br><span class="line">hexo generate  # Generate static files.</span><br><span class="line">hexo server    # Start the server.</span><br><span class="line">示例:</span><br><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo s &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>清除，编译，发布之后就可以在 <code>localhost:4000</code> 看到网页，网页默认使用的主题是 Next 主题。</p><p>Hexo 发布到 Github Pages</p><ol><li>在安装目录，安装发布插件</li><li>将本地目录与github进行关联</li><li>对<code>_config.yml</code>文件进行编辑</li><li>生成页面</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save # 安装发布插件</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; # 本地目录与 Github 进行关联</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步得到的 id_rsa.pub 在 C:/Users/[username]/.ssh下，github中新建一个 ssh key 放入该文件内容</span></span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 文件中<code>deploy</code>修改如下信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用这个配置不用每次都输入账号密码</span></span><br><span class="line">repo: git@github.com:Github用户名/github用户名.github.io.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> repo: git@github.com:RamboCao/RamboCao.github.io.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可使用https地址, 但是每次push或者编译都需要输入账号密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repo: https://github.com/RamboCao/RamboCao.github.io</span> </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>控制台输入上方的 <code>hexo g &amp;&amp; hexo d </code>命令， 就可以在 <strong><a href="https://xn--eqr924avxo.github.io">https://用户名.github.io</a></strong> 中查看网站的内容，和本地调试保持一致。</p><h3 id="hexo-主题优化"><a class="markdownIt-Anchor" href="#hexo-主题优化"></a> Hexo 主题优化</h3><div class="note info modern"><p>这是一个采用 <code> ButterFly Design</code> 和响应式设计的 Hexo 博客主题，一开始采用的是 <code>Material Design</code>, 后来看到 ButterFly 主题更加好看，最关键是的是右侧栏有头像，目录，标签，分类等内容，所以果断进行切换。</p></div><h4 id="主题下载"><a class="markdownIt-Anchor" href="#主题下载"></a> 主题下载</h4><p>在博客根目录进行下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装稳定版</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装测试版</span></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h4><p>修改站点配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>安装 pug 和 stylus 渲染器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="升级建议"><a class="markdownIt-Anchor" href="#升级建议"></a> 升级建议</h4><p>把主题文件夹中的 <code>_config.yml</code> 复製到 Hexo 根目录里，同时重新命名为 <code>_config.butterfly.yml</code>。</p><p>以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。</p><p>Hexo会自动合併主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p><h4 id="新建页面"><a class="markdownIt-Anchor" href="#新建页面"></a> 新建页面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 tags 页面</span></span><br><span class="line">hexo new page tags</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 categories 页面</span></span><br><span class="line">hexo new page categories</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建友链页面</span></span><br><span class="line">hexo new page link</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 about 页面</span></span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><div class="note info modern"><p>添加一个页面必须在 <code>source/xxx/index.md</code> 页面下内容添加对应的 type。</p></div><h4 id="footer-设置"><a class="markdownIt-Anchor" href="#footer-设置"></a> Footer 设置</h4><p>将 Footer 设置成为一个动态变换的颜色</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/css/footer.min.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/css/buttons.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>footer_bg</code> 属性设置为 <code>false</code> 这样可以使得每一篇文章的页脚显示与主页一样的效果，而不是 <code>top_img</code> 背景图的一部分。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="主题以及页面背景色"><a class="markdownIt-Anchor" href="#主题以及页面背景色"></a> 主题以及页面背景色</h4><p>将主题替换成为 <code>orange</code> 主题，并且将背景色调整成渐变色</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 背景色渐变色</span></span><br><span class="line"><span class="attr">background:</span> </span><br><span class="line"><span class="string">linear-gradient(</span></span><br><span class="line">    <span class="string">90deg,</span></span><br><span class="line">    <span class="string">rgba(247,</span> <span class="number">149</span><span class="string">,</span> <span class="number">51</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="string">rgba(243,</span> <span class="number">112</span><span class="string">,</span> <span class="number">85</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">15</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(239,</span> <span class="number">78</span><span class="string">,</span> <span class="number">123</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">30</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(161,</span> <span class="number">102</span><span class="string">,</span> <span class="number">171</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">44</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(80,</span> <span class="number">115</span><span class="string">,</span> <span class="number">184</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">58</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(16,</span> <span class="number">152</span><span class="string">,</span> <span class="number">173</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">72</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(7,</span> <span class="number">179</span><span class="string">,</span> <span class="number">155</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">86</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(109,</span> <span class="number">186</span><span class="string">,</span> <span class="number">130</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">  <span class="string">)</span></span><br><span class="line"><span class="comment"># 主题色换为 orange</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#daa520&quot;</span></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>不能直接设置 <code>cover:default_cover:</code>会造成页脚动态变换失效.</p></div><h3 id="hexo-插件配置"><a class="markdownIt-Anchor" href="#hexo-插件配置"></a> Hexo 插件配置</h3><p>添加一些信息来完善博客的功能</p><h4 id="中文链接转拼音"><a class="markdownIt-Anchor" href="#中文链接转拼音"></a> 中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 中添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改permalink posts 方式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class="line">  <span class="comment"># Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#true(default)</span></span><br><span class="line">     <span class="attr">depth:</span>        <span class="comment">#3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment">#enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment">#enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></table></figure><p>为了使得 <code>_post</code> 中的文件按照 年/月 的方式展示，在配置文件<code>_config.yml</code>中设置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">post/:year-:month-:day/:title.md</span> <span class="comment"># File name of new posts</span></span><br></pre></td></tr></table></figure><h4 id="添加-rss-订阅支持"><a class="markdownIt-Anchor" href="#添加-rss-订阅支持"></a> 添加 RSS 订阅支持</h4><p>使用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 支持 RSS 订阅:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 中添加:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><h4 id="代码压缩"><a class="markdownIt-Anchor" href="#代码压缩"></a> 代码压缩</h4><p>本博客采用 <strong>glup</strong> 代码压缩方式:</p><ul><li>glup 以及插件安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">  #</span><span class="bash"> 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></table></figure>  <div class="note warning modern"><p>此处 <code>gulp-babel</code>会安装8.0版本的，不兼容 Hexo，会对压缩一些图像文件造成影响，控制台有报错信息，所以需要安装7.0版本的，安装命令为：</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev gulp-babel@7 babel-core babel-preset-env</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @babel/plugin-transform-runtime</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save @babel/runtime</span></span><br></pre></td></tr></table></figure><ul><li>构建压缩脚本<br />根目录新建文件 <code>gulpfile.js</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">&quot;gulp-debug&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">&quot;gulp-changed&quot;</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">&quot;gulp-if&quot;</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">&quot;gulp-plumber&quot;</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">&quot;gulp-babel&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">&quot;babel-preset-es2015&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">&quot;del&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">&quot;hexo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">&quot;clean&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">&quot;public/**/*&quot;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">&quot;generate&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;generate&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.call(<span class="string">&quot;server&quot;</span>, &#123;&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;deploy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;deploy&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressJs&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/libs/**&quot;</span>]) <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress JS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel(&#123;</span><br><span class="line">                presets: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressCss&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        rebase: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        compatibility: <span class="string">&quot;ie7&quot;</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: &#x27;*&#x27; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.css&quot;</span>, <span class="string">&quot;!./public/**/*.min.css&quot;</span>]) <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress CSS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressHtml&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">        protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">        minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress HTML:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/medias 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressImage&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number 默认：3 取值范围：0-7（优化等级）</span></span><br><span class="line">        progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/medias/**/*.*&quot;</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public/medias&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress Images:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;build&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressHtml&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressCss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressJs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressImage&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;deploy&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;compressHtml&quot;</span>, <span class="string">&quot;compressCss&quot;</span>, <span class="string">&quot;compressJs&quot;</span>,<span class="string">&quot;compressImage&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span><br></pre></td></tr></table></figure><ul><li>执行压缩并部署<ul><li>直接在 Hexo 根目录执行 <code>gulp</code> 或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 <code>gulp build</code> ，这个命令与第 1 种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ul></li></ul><h4 id="hexo-neat-代码压缩"><a class="markdownIt-Anchor" href="#hexo-neat-代码压缩"></a> hexo-neat 代码压缩</h4><p>与主题不兼容，同时会使得 markdown 语法块消失，而且回删除全角空格，所以本文不采用该种方式。</p><h3 id="与-vs-code-关联"><a class="markdownIt-Anchor" href="#与-vs-code-关联"></a> 与 VS Code 关联</h3><p>在根目录下新建 <code>/scripts/auto_open.js</code>, 插入如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line"><span class="comment">//hexo.on(&#x27;new&#x27;, function(path)&#123;</span></span><br><span class="line">  <span class="comment">//spawn(&#x27;start  &quot;markdown编辑器绝对路径.exe&quot; &#x27; + path);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start  &quot;D:\Microsoft VS Code\Code.exe&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <code>D:\Microsoft VS Code\Code.exe</code> 为 VS Code 运行路径。</p><hr /><h3 id="hexo-自动部署"><a class="markdownIt-Anchor" href="#hexo-自动部署"></a> Hexo 自动部署</h3><hr /><h3 id="picgo-vs-code-配置"><a class="markdownIt-Anchor" href="#picgo-vs-code-配置"></a> PicGo VS Code 配置</h3><p>图床可以更方便的对文章添加图片，无论是从本地添加图片，或者是截图直接进行添加， 本文中主要采用 VS Code 中添加 <code>PicGo</code> 插件来实现。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 仓库名，格式是username/reponame</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// github token</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 自定义存储路径，比如img/</span></span><br><span class="line">  <span class="attr">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 自定义域名，注意要加http://或者https://</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 分支名，默认是main</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 token 为存放图片的仓库的 token, 新建仓库之后，可以访问 <a href="https://github.com/settings/tokens">token</a>,然后点击 <code>Generate new token</code> 可生成一个token, 填入即可。</p><div class="note danger modern"><p>danger 这个 token 只生成一次！请将其保存！</p></div><p><code>customerUrl</code> 设置为 <code><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a></code>, 通过 jsDelivr Jinx ing加速，由于 jsDelivr 和 PicGo 搭配使用，所以无需额外配置， 如果只使用默认的前缀，图片可能无法访问。本博客中 <code>customerUrl</code> 为：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;picgo.picBed.github.customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/RamboCao/PicGo&quot;</span><br></pre></td></tr></table></figure><p>VS Code 中的快捷键：<br /><code>Ctrl + Alt + U</code> Uploading an image from clipboard<br /><code>Ctrl + Alt + E</code> Uploading images from explorer<br /><code>Ctrl + Alt + O</code> Uploading an image from input box</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18010.jpg" alt="这是一个图片测试" /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156/"/>
      <url>posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<hr /><p>test insert<br />Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一个测试文件</title>
      <link href="posts/ee4a3a15/"/>
      <url>posts/ee4a3a15/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button  <a class="btn-beautify button--animated block larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><br />This is my website, click the button  <a class="btn-beautify button--animated block center larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><br />This is my website, click the button  <a class="btn-beautify button--animated block right blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify button--animated larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated red larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated green larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></div><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示块标籤</p></div><div class="note default simple"><p>default 提示块标籤</p></div><div class="note primary simple"><p>primary 提示块标籤</p></div><div class="note success simple"><p>success 提示块标籤</p></div><div class="note info simple"><p>info 提示块标籤</p></div><div class="note warning simple"><p>warning 提示块标籤</p></div><div class="note danger simple"><p>danger 提示块标籤</p></div><div class="note modern"><p>默认 提示块标籤</p></div><div class="note default modern"><p>default 提示块标籤</p></div><div class="note primary modern"><p>primary 提示块标籤</p></div><div class="note success modern"><p>success 提示块标籤</p></div><div class="note info modern"><p>info 提示块标籤</p></div><div class="note warning modern"><p>warning 提示块标籤</p></div><div class="note danger modern"><p>danger 提示块标籤</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>image</p><img class="[class names] ..&#x2F;images&#x2F;cat.png &quot;a cat&quot; &quot;alt text&quot;"><p><img src="https://github.com/RamboCao/PicGo/images/20201223105029.png" alt="20201223105029" /></p>]]></content>
      
      
      <categories>
          
          <category> 分类测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
