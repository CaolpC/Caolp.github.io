<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 博客备份与迁移</title>
      <link href="posts/c9eafdcf/"/>
      <url>posts/c9eafdcf/</url>
      
        <content type="html"><![CDATA[<p>之前使用 </code>Hexo</code> 和 </code>Github Pages</code> 搭建了 Hexo 博客，但是每次运行 <code>hexo g &amp;&amp; hexo g</code> 只是将生成的静态文件部署在 Github 上，所以如果想要对 Hexo 博客进行备份或者是迁移到其他的电脑上，就需要将 Hexo 生成的网站源文件也 push 到 Github 上，但是 master 分支主要是用来部署 hexo 静态文件的，主要体现在 <code>_config.uml</code> 中的 <code>deploy</code>的配置上，所以我们需要新建一个分支来对源码进行推送。</p><h3 id="主要步骤"><a class="markdownIt-Anchor" href="#主要步骤"></a> 主要步骤</h3><h4 id="预处理"><a class="markdownIt-Anchor" href="#预处理"></a> 预处理</h4><p>将项目文件中主题文件夹中的 <code>.git</code> 文件夹删除，避免在 push 操作中出现问题。然后在项目文件夹中新建 <code>.gitignore</code>文件，该文件的主要作用是剔除一些无需上传的文件或者文件夹，输入的内容为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="创建本地分支"><a class="markdownIt-Anchor" href="#创建本地分支"></a> 创建本地分支</h4><p>主要的命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash">创建hexo分支，用来存放源码</span></span><br><span class="line">git checkout -b hexo</span><br><span class="line"><span class="meta">#</span><span class="bash">git 文件添加</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash">git 提交</span></span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程仓库，github上的博客仓库</span></span><br><span class="line">git remote add origin git@github.com:RamboCao/RamboCao.github.io.git</span><br><span class="line"><span class="meta">#</span><span class="bash">push到hexo分支</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>此时，在 Github 远端有两个不同的分支，一个分支是 <code>master</code>, 另外一个分支是 <code>hexo</code>, 我们在书写代码的时候使用 <code>hexo</code> 分支，在提交源代码的时候使用 <code>hexo</code> 分支。</p><h4 id="执行部署"><a class="markdownIt-Anchor" href="#执行部署"></a> 执行部署</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这样会在 <code>master</code> 分支上对代码进行更新和部署。</p><hr /><h3 id="迁移代码"><a class="markdownIt-Anchor" href="#迁移代码"></a> 迁移代码</h3><p>该操作是将远程的代码 pull 到一台新的机器上边，直接拉取远端 <code>hexo</code> 分支上上的代码到本地。所以首先在本地新建一个文件夹 ***.</p><h4 id="github-安装与设置"><a class="markdownIt-Anchor" href="#github-安装与设置"></a> Github 安装与设置</h4><p>Github 仓库并没有新电脑的私钥，所以需要在新的电脑上生成一个私钥，然后在网页端新加入一个 <code>SSH Key</code>，新建私钥的命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;github账号邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后查看 <code>.ssh</code> 文件夹中<code>id_rsa.pub</code>内容复制到网页 Github 中新建的 <code>SSH Key</code>中。</p><h4 id="远程拉取特定分支代码"><a class="markdownIt-Anchor" href="#远程拉取特定分支代码"></a> 远程拉取特定分支代码</h4><p>选择创建好的文件夹，然后将远端的 <code>hexo</code> 分支的代码拉取到本地文件夹中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> -b &lt;远程指定分支&gt; &lt;远程仓库地址&gt; &lt;本地文件夹名&gt;</span></span><br><span class="line">git clone -b hexo git@github.com:RamboCao/RamboCao.github.io.git ./blog</span><br></pre></td></tr></table></figure><h4 id="安装npm依赖"><a class="markdownIt-Anchor" href="#安装npm依赖"></a> 安装npm依赖</h4><h2 id="-code5-"><a class="markdownIt-Anchor" href="#-code5-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install gulp -g </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></h2><h3 id="更新多分支代码"><a class="markdownIt-Anchor" href="#更新多分支代码"></a> 更新多分支代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以使用 hexo c &amp;&amp; hexo g &amp;&amp; hexo d</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以使用自动部署脚本 glup build</span></span><br><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d </span><br><span class="line">gulp build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再将代码 push 到 hexo 分支，保证代码的完整</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update&#x27;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h4 id="安装一些其他的软件"><a class="markdownIt-Anchor" href="#安装一些其他的软件"></a> 安装一些其他的软件</h4><ul><li>PicGo</li><li>VS Code</li></ul><div class="note info modern"><p>新建 Page 自动打开 VS Code 需要配置新的路径，由于不同环境不一样，所以可以考虑在 <code>.gitignore</code>中设置</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pic Go</title>
      <link href="posts/c4fe5b8b/"/>
      <url>posts/c4fe5b8b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="posts/ab21860c/"/>
      <url>posts/ab21860c/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr /><h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h2><p>Hexo 优点:</p><ul><li>渲染速度快</li><li>支持 Markdown</li><li>一键部署</li><li>插件和可扩展性</li></ul><hr /><h3 id="hexo-安装"><a class="markdownIt-Anchor" href="#hexo-安装"></a> Hexo 安装</h3><h4 id="npm-安装"><a class="markdownIt-Anchor" href="#npm-安装"></a> npm 安装</h4><p>采用 npm 安装并且进行初始化, 由于npm的默认源下载较慢，所以可以更换下载源进行下载。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看npm的配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认源</span></span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 临时改变镜像源</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久设置为淘宝镜像源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 另一种方式，编辑 ~/.npmrc 加入下面内容</span></span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><div class="note info modern"><p>npm 包的全局模块路径和缓存路径进行设置</p></div><h4 id="npm-全局模块路径和缓存路径"><a class="markdownIt-Anchor" href="#npm-全局模块路径和缓存路径"></a> npm 全局模块路径和缓存路径</h4><p>先新建两个文件夹 <code>node_global</code> 和 <code>node_cache</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>然后在环境变量中找到 path 变量进行修改，修改值：<br /><code>C:/Users/[username]/AppData/Roaming/npm</code><br /><code>C:/Program Files/nodejs/node_cache</code></p><h4 id="git-安装"><a class="markdownIt-Anchor" href="#git-安装"></a> Git 安装</h4><ul><li>Git 仓库搭建规则：必须使用 <code>&lt;用户名&gt;.github.io</code>, 这样才能在部署的时候匹配到，直接访问 <a href="https://RamboCao.github.io">Github</a>.</li><li>然后在本地对 Git 进行配置即可</li></ul><h4 id="hexo-安装与发布到-github-pages"><a class="markdownIt-Anchor" href="#hexo-安装与发布到-github-pages"></a> Hexo 安装与发布到 Github Pages</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hexo框架的安装</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等上一个命令完成后，在输入下面的命令</span></span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure><p>Hexo 基本命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean     # Remove generated files and cache.</span><br><span class="line">hexo deploy    # Deploy your website.</span><br><span class="line">hexo generate  # Generate static files.</span><br><span class="line">hexo server    # Start the server.</span><br><span class="line">示例:</span><br><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo s &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>清除，编译，发布之后就可以在 <code>localhost:4000</code> 看到网页，网页默认使用的主题是 Next 主题。</p><p>Hexo 发布到 Github Pages</p><ol><li>在安装目录，安装发布插件</li><li>将本地目录与github进行关联</li><li>对<code>_config.yml</code>文件进行编辑</li><li>生成页面</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save # 安装发布插件</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; # 本地目录与 Github 进行关联</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步得到的 id_rsa.pub 在 C:/Users/[username]/.ssh下，github中新建一个 ssh key 放入该文件内容</span></span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 文件中<code>deploy</code>修改如下信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:Github用户名/github用户名.github.io.git  </span><br><span class="line">//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>控制台输入上方的 <code>hexo g &amp;&amp; hexo d </code>命令， 就可以在 <strong><a href="https://xn--eqr924avxo.github.io">https://用户名.github.io</a></strong> 中查看网站的内容，和本地调试保持一致。</p><h3 id="hexo-主题优化"><a class="markdownIt-Anchor" href="#hexo-主题优化"></a> Hexo 主题优化</h3><div class="note info modern"><p>这是一个采用 <code> ButterFly Design</code> 和响应式设计的 Hexo 博客主题，一开始采用的是 <code>Material Design</code>, 后来看到 ButterFly 主题更加好看，最关键是的是右侧栏有头像，目录，标签，分类等内容，所以果断进行切换。</p></div><h4 id="主题下载"><a class="markdownIt-Anchor" href="#主题下载"></a> 主题下载</h4><p>在博客根目录进行下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装稳定版</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装测试版</span></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h4><p>修改站点配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>安装 pug 和 stylus 渲染器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="升级建议"><a class="markdownIt-Anchor" href="#升级建议"></a> 升级建议</h4><p>把主题文件夹中的 <code>_config.yml</code> 复製到 Hexo 根目录里，同时重新命名为 <code>_config.butterfly.yml</code>。</p><p>以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。</p><p>Hexo会自动合併主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p><h4 id="新建页面"><a class="markdownIt-Anchor" href="#新建页面"></a> 新建页面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 tags 页面</span></span><br><span class="line">hexo new page tags</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 categories 页面</span></span><br><span class="line">hexo new page categories</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建友链页面</span></span><br><span class="line">hexo new page link</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 about 页面</span></span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><div class="note info modern"><p>添加一个页面必须在 <code>source/xxx/index.md</code> 页面下内容添加对应的 type。</p></div><h4 id="footer-设置"><a class="markdownIt-Anchor" href="#footer-设置"></a> Footer 设置</h4><p>将 Footer 设置成为一个动态变换的颜色</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/css/footer.min.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/css/buttons.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>footer_bg</code> 属性设置为 <code>false</code> 这样可以使得每一篇文章的页脚显示与主页一样的效果，而不是 <code>top_img</code> 背景图的一部分。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="主题以及页面背景色"><a class="markdownIt-Anchor" href="#主题以及页面背景色"></a> 主题以及页面背景色</h4><p>将主题替换成为 <code>orange</code> 主题，并且将背景色调整成渐变色</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 背景色渐变色</span></span><br><span class="line"><span class="attr">background:</span> </span><br><span class="line"><span class="string">linear-gradient(</span></span><br><span class="line">    <span class="string">90deg,</span></span><br><span class="line">    <span class="string">rgba(247,</span> <span class="number">149</span><span class="string">,</span> <span class="number">51</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="string">rgba(243,</span> <span class="number">112</span><span class="string">,</span> <span class="number">85</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">15</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(239,</span> <span class="number">78</span><span class="string">,</span> <span class="number">123</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">30</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(161,</span> <span class="number">102</span><span class="string">,</span> <span class="number">171</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">44</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(80,</span> <span class="number">115</span><span class="string">,</span> <span class="number">184</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">58</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(16,</span> <span class="number">152</span><span class="string">,</span> <span class="number">173</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">72</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(7,</span> <span class="number">179</span><span class="string">,</span> <span class="number">155</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">86</span><span class="string">%,</span></span><br><span class="line">    <span class="string">rgba(109,</span> <span class="number">186</span><span class="string">,</span> <span class="number">130</span><span class="string">,</span> <span class="number">0.1</span><span class="string">)</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">  <span class="string">)</span></span><br><span class="line"><span class="comment"># 主题色换为 orange</span></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#daa520&quot;</span></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>不能直接设置 <code>cover:default_cover:</code>会造成页脚动态变换失效.</p></div><h3 id="hexo-插件配置"><a class="markdownIt-Anchor" href="#hexo-插件配置"></a> Hexo 插件配置</h3><p>添加一些信息来完善博客的功能</p><h4 id="中文链接转拼音"><a class="markdownIt-Anchor" href="#中文链接转拼音"></a> 中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 中添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改permalink posts 方式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class="line">  <span class="comment"># Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#true(default)</span></span><br><span class="line">     <span class="attr">depth:</span>        <span class="comment">#3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment">#enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment">#enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></table></figure><p>为了使得 <code>_post</code> 中的文件按照 年/月 的方式展示，在配置文件<code>_config.yml</code>中设置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">post/:year-:month-:day/:title.md</span> <span class="comment"># File name of new posts</span></span><br></pre></td></tr></table></figure><h4 id="添加-rss-订阅支持"><a class="markdownIt-Anchor" href="#添加-rss-订阅支持"></a> 添加 RSS 订阅支持</h4><p>使用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 支持 RSS 订阅:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 中添加:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><h4 id="代码压缩"><a class="markdownIt-Anchor" href="#代码压缩"></a> 代码压缩</h4><p>本博客采用 <strong>glup</strong> 代码压缩方式:</p><ul><li>glup 以及插件安装</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">  #</span><span class="bash"> 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></table></figure>  <div class="note warning modern"><p>此处 <code>gulp-babel</code>会安装8.0版本的，不兼容 Hexo，会对压缩一些图像文件造成影响，控制台有报错信息，所以需要安装7.0版本的，安装命令为：</p></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev gulp-babel@7 babel-core babel-preset-env</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @babel/plugin-transform-runtime</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save @babel/runtime</span></span><br></pre></td></tr></table></figure><ul><li>构建压缩脚本<br />根目录新建文件 <code>gulpfile.js</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">&quot;gulp-debug&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlclean&quot;</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">&quot;gulp-changed&quot;</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">&quot;gulp-if&quot;</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">&quot;gulp-plumber&quot;</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">&quot;gulp-babel&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">&quot;babel-preset-es2015&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">&quot;del&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">&quot;hexo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">&quot;clean&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">&quot;public/**/*&quot;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">&quot;generate&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;generate&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.call(<span class="string">&quot;server&quot;</span>, &#123;&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">&quot;deploy&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">&quot;deploy&quot;</span>, &#123;</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressJs&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.js&quot;</span>, <span class="string">&quot;!./public/libs/**&quot;</span>]) <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress JS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel(&#123;</span><br><span class="line">                presets: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressCss&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        rebase: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        compatibility: <span class="string">&quot;ie7&quot;</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: &#x27;*&#x27; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">&quot;./public/**/*.css&quot;</span>, <span class="string">&quot;!./public/**/*.min.css&quot;</span>]) <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress CSS:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressHtml&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">        protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">        minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress HTML:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/medias 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">&quot;compressImage&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number 默认：3 取值范围：0-7（优化等级）</span></span><br><span class="line">        progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">&quot;./public/medias/**/*.*&quot;</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">&quot;./public/medias&quot;</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">&quot;Compress Images:&quot;</span> &#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;build&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressHtml&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressCss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressJs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;compressImage&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;deploy&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generate&quot;</span>,</span><br><span class="line">        gulp.parallel(<span class="string">&quot;compressHtml&quot;</span>, <span class="string">&quot;compressCss&quot;</span>, <span class="string">&quot;compressJs&quot;</span>,<span class="string">&quot;compressImage&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span><br></pre></td></tr></table></figure><ul><li>执行压缩并部署<ul><li>直接在 Hexo 根目录执行 <code>gulp</code> 或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 <code>gulp build</code> ，这个命令与第 1 种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ul></li></ul><h4 id="hexo-neat-代码压缩"><a class="markdownIt-Anchor" href="#hexo-neat-代码压缩"></a> hexo-neat 代码压缩</h4><p>与主题不兼容，同时会使得 markdown 语法块消失，而且回删除全角空格，所以本文不采用该种方式。</p><h3 id="与-vs-code-关联"><a class="markdownIt-Anchor" href="#与-vs-code-关联"></a> 与 VS Code 关联</h3><p>在根目录下新建 <code>/scripts/auto_open.js</code>, 插入如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line"><span class="comment">//hexo.on(&#x27;new&#x27;, function(path)&#123;</span></span><br><span class="line">  <span class="comment">//spawn(&#x27;start  &quot;markdown编辑器绝对路径.exe&quot; &#x27; + path);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start  &quot;D:\Microsoft VS Code\Code.exe&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <code>D:\Microsoft VS Code\Code.exe</code> 为 VS Code 运行路径。</p><hr /><h3 id="hexo-自动部署"><a class="markdownIt-Anchor" href="#hexo-自动部署"></a> Hexo 自动部署</h3><hr /><h3 id="picgo-vs-code-配置"><a class="markdownIt-Anchor" href="#picgo-vs-code-配置"></a> PicGo VS Code 配置</h3><p>图床可以更方便的对文章添加图片，无论是从本地添加图片，或者是截图直接进行添加， 本文中主要采用 VS Code 中添加 <code>PicGo</code> 插件来实现。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;repo&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 仓库名，格式是username/reponame</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// github token</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 自定义存储路径，比如img/</span></span><br><span class="line">  <span class="attr">&quot;customUrl&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 自定义域名，注意要加http://或者https://</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 分支名，默认是main</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 token 为存放图片的仓库的 token, 新建仓库之后，可以访问 <a href="https://github.com/settings/tokens">token</a>,然后点击 <code>Generate new token</code> 可生成一个token, 填入即可。</p><div class="note danger modern"><p>danger 这个 token 只生成一次！请将其保存！</p></div><p><code>customerUrl</code> 设置为 <code><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a></code>, 通过 jsDelivr Jinx ing加速，由于 jsDelivr 和 PicGo 搭配使用，所以无需额外配置， 如果只使用默认的前缀，图片可能无法访问。本博客中 <code>customerUrl</code> 为：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;picgo.picBed.github.customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/RamboCao/PicGo&quot;</span><br></pre></td></tr></table></figure><p>VS Code 中的快捷键：<br /><code>Ctrl + Alt + U</code> Uploading an image from clipboard<br /><code>Ctrl + Alt + E</code> Uploading images from explorer<br /><code>Ctrl + Alt + O</code> Uploading an image from input box</p><p><img src="https://cdn.jsdelivr.net/gh/RamboCao/PicGo/images/18010.jpg" alt="这是一个图片测试" /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo, Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156/"/>
      <url>posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<hr /><p>test insert<br />Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一个测试文件</title>
      <link href="posts/ee4a3a15/"/>
      <url>posts/ee4a3a15/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button  <a class="btn-beautify button--animated block larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><br />This is my website, click the button  <a class="btn-beautify button--animated block center larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><br />This is my website, click the button  <a class="btn-beautify button--animated block right blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify button--animated larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated red larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated green larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></div><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示块标籤</p></div><div class="note default simple"><p>default 提示块标籤</p></div><div class="note primary simple"><p>primary 提示块标籤</p></div><div class="note success simple"><p>success 提示块标籤</p></div><div class="note info simple"><p>info 提示块标籤</p></div><div class="note warning simple"><p>warning 提示块标籤</p></div><div class="note danger simple"><p>danger 提示块标籤</p></div><div class="note modern"><p>默认 提示块标籤</p></div><div class="note default modern"><p>default 提示块标籤</p></div><div class="note primary modern"><p>primary 提示块标籤</p></div><div class="note success modern"><p>success 提示块标籤</p></div><div class="note info modern"><p>info 提示块标籤</p></div><div class="note warning modern"><p>warning 提示块标籤</p></div><div class="note danger modern"><p>danger 提示块标籤</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>image</p><img class="[class names] ..&#x2F;images&#x2F;cat.png &quot;a cat&quot; &quot;alt text&quot;"><p><img src="https://github.com/RamboCao/PicGo/images/20201223105029.png" alt="20201223105029" /></p>]]></content>
      
      
      <categories>
          
          <category> 分类测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
